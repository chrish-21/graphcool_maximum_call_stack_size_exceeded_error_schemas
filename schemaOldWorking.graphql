input AddToFoodItemIngredientFoodItemInput {
  ingredientIngredientId: ID!
  foodItemsFoodItemId: ID!
  clientMutationId: String!
}

type AddToFoodItemIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItemsFoodItem: FoodItem
  ingredientIngredient: Ingredient
  foodItemsFoodItemEdge: FoodItemEdge
  ingredientIngredientEdge: IngredientEdge
}

input AddToFoodLeftoversFoodInput {
  leftovers1FoodId: ID!
  leftovers2FoodId: ID!
  clientMutationId: String!
}

type AddToFoodLeftoversPayload {
  viewer: Viewer!
  clientMutationId: String!
  leftovers2Food: Food
  leftovers1Food: Food
  leftovers2FoodEdge: FoodEdge
  leftovers1FoodEdge: FoodEdge
}

input AddToFoodRecipeFoodInput {
  recipeRecipeId: ID!
  foodFoodId: ID!
  clientMutationId: String!
}

input AddToFoodServingsFoodInput {
  servingsServingId: ID!
  foodFoodId: ID!
  clientMutationId: String!
}

type AddToFoodServingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodFood: Food
  servingsServing: Serving
  foodFoodEdge: FoodEdge
  servingsServingEdge: ServingEdge
}

input AddToIngredientNutritionValuesIngredientInput {
  nutritionValuesNutritionValuesId: ID!
  ingredientIngredientId: ID!
  clientMutationId: String!
}

input AddToKitchenUtensilImgKitchenUtensilInput {
  imgFileId: ID!
  kitchenUtensilImgKitchenUtensilId: ID!
  clientMutationId: String!
}

input AddToMealFoodsMealInput {
  foodsFoodId: ID!
  mealMealId: ID!
  clientMutationId: String!
}

type AddToMealFoodsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealMeal: Meal
  foodsFood: Food
  mealMealEdge: MealEdge
  foodsFoodEdge: FoodEdge
}

input AddToMealMealSettingsMealInput {
  mealSettingsMealSettingsId: ID!
  mealMealId: ID!
  clientMutationId: String!
}

type AddToMealMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealMeal: Meal
  mealSettingsMealSettings: MealSettings
  mealMealEdge: MealEdge
  mealSettingsMealSettingsEdge: MealSettingsEdge
}

input AddToMicroTargetDayMicroTargetsMicroTargetsDayInput {
  microTargetsMicroTargetId: ID!
  microTargetDayMicroTargetsDayId: ID!
  clientMutationId: String!
}

type AddToMicroTargetDayMicroTargetsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetDayMicroTargetsDay: MicroTargetsDay
  microTargetsMicroTarget: MicroTarget
  microTargetDayMicroTargetsDayEdge: MicroTargetsDayEdge
  microTargetsMicroTargetEdge: MicroTargetEdge
}

input AddToMicroTargetsSettingsMicroTargetsDayMicroTargetsSettingsInput {
  microTargetsDaysMicroTargetsDayId: ID!
  microTargetsSettingsMicroTargetsSettingsId: ID!
  clientMutationId: String!
}

type AddToMicroTargetsSettingsMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettingsMicroTargetsSettings: MicroTargetsSettings
  microTargetsDaysMicroTargetsDay: MicroTargetsDay
  microTargetsSettingsMicroTargetsSettingsEdge: MicroTargetsSettingsEdge
  microTargetsDaysMicroTargetsDayEdge: MicroTargetsDayEdge
}

input AddToNutritionTargetsSettingsNutritionTargetsDaysNutritionTargetsSettingsInput {
  nutritionTargetsDaysNutritionTargetsDayId: ID!
  nutritionTargetsSettingsNutritionTargetsSettingsId: ID!
  clientMutationId: String!
}

type AddToNutritionTargetsSettingsNutritionTargetsDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettingsNutritionTargetsSettings: NutritionTargetsSettings
  nutritionTargetsDaysNutritionTargetsDay: NutritionTargetsDay
  nutritionTargetsSettingsNutritionTargetsSettingsEdge: NutritionTargetsSettingsEdge
  nutritionTargetsDaysNutritionTargetsDayEdge: NutritionTargetsDayEdge
}

input AddToPantryItemFoodItemPantryItemInput {
  foodItemFoodItemId: ID!
  pantryItemPantryItemId: ID!
  clientMutationId: String!
}

type AddToPersonDislikedRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  dislikedByPerson: Person
  dislikedRecipesRecipe: Recipe
  dislikedByPersonEdge: PersonEdge
  dislikedRecipesRecipeEdge: RecipeEdge
}

input AddToPersonDislikedRecipesPersonInput {
  dislikedRecipesRecipeId: ID!
  dislikedByPersonId: ID!
  clientMutationId: String!
}

type AddToPersonLikedRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  likedByPerson: Person
  likedRecipesRecipe: Recipe
  likedByPersonEdge: PersonEdge
  likedRecipesRecipeEdge: RecipeEdge
}

input AddToPersonLikedRecipesPersonInput {
  likedRecipesRecipeId: ID!
  likedByPersonId: ID!
  clientMutationId: String!
}

type AddToPersonLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  personsPerson: Person
  limitationProfileLimitationProfile: LimitationProfile
  personsPersonEdge: PersonEdge
  limitationProfileLimitationProfileEdge: LimitationProfileEdge
}

input AddToPersonLimitationProfilePersonInput {
  limitationProfileLimitationProfileId: ID!
  personsPersonId: ID!
  clientMutationId: String!
}

input AddToPersonMealSettingsMealSettingsInput {
  personPersonId: ID!
  mealSettingsMealSettingsId: ID!
  clientMutationId: String!
}

type AddToPersonMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettingsMealSettings: MealSettings
  personPerson: Person
  mealSettingsMealSettingsEdge: MealSettingsEdge
  personPersonEdge: PersonEdge
}

input AddToPersonMicroTargetsSettingsPersonInput {
  microTargetsSettingsMicroTargetsSettingsId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

input AddToPersonNutritionTargetsSettingsPersonInput {
  nutritionTargetsSettingsNutritionTargetsSettingsId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

input AddToPersonPersonalDataPersonInput {
  personalDataPersonalDataId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

input AddToRecipeImgRecipeInput {
  imgFileId: ID!
  recipeImgRecipeId: ID!
  clientMutationId: String!
}

type AddToRecipeIngredientsPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeRecipe: Recipe
  ingredientsIngredient: Ingredient
  recipeRecipeEdge: RecipeEdge
  ingredientsIngredientEdge: IngredientEdge
}

input AddToRecipeIngredientsRecipeInput {
  ingredientsIngredientId: ID!
  recipeRecipeId: ID!
  clientMutationId: String!
}

input AddToRecipeNutritionValuesRecipeInput {
  nutritionValuesNutritionValuesId: ID!
  recipeRecipeId: ID!
  clientMutationId: String!
}

input AddToServingPersonServingInput {
  personPersonId: ID!
  servingServingId: ID!
  clientMutationId: String!
}

input AddToUserAppSettingsUserInput {
  appSettingsAppSettingsId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserIngredientsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  userIngredientsIngredient: Ingredient
  userUserEdge: UserEdge
  userIngredientsIngredientEdge: IngredientEdge
}

input AddToUserIngredientsUserInput {
  userIngredientsIngredientId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserLimitationProfilesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  limitationProfilesLimitationProfile: LimitationProfile
  userUserEdge: UserEdge
  limitationProfilesLimitationProfileEdge: LimitationProfileEdge
}

input AddToUserLimitationProfilesUserInput {
  limitationProfilesLimitationProfileId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserMealsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  mealsMeal: Meal
  userUserEdge: UserEdge
  mealsMealEdge: MealEdge
}

input AddToUserMealsUserInput {
  mealsMealId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserPantryItemsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  pantryItemsPantryItem: PantryItem
  userUserEdge: UserEdge
  pantryItemsPantryItemEdge: PantryItemEdge
}

input AddToUserPantryItemsUserInput {
  pantryItemsPantryItemId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserPersonsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personsPerson: Person
  userUser: User
  personsPersonEdge: PersonEdge
  userUserEdge: UserEdge
}

input AddToUserPersonsPersonInput {
  userUserId: ID!
  personsPersonId: ID!
  clientMutationId: String!
}

type AddToUserRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipesRecipe: Recipe
  userUser: User
  recipesRecipeEdge: RecipeEdge
  userUserEdge: UserEdge
}

input AddToUserRecipesRecipeInput {
  userUserId: ID!
  recipesRecipeId: ID!
  clientMutationId: String!
}

type AppSettings implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

# A connection to a list of items.
type AppSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AppSettingsEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type AppSettingsEdge {
  # The item at the end of the edge.
  node: AppSettings!

  # A cursor for use in pagination.
  cursor: String!
}

input AppSettingsFilter {
  # Logical AND on all given filters.
  AND: [AppSettingsFilter!]

  # Logical OR on all given filters.
  OR: [AppSettingsFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserFilter
}

enum AppSettingsOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AUTH_PROVIDER_EMAIL {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  email: AUTH_PROVIDER_EMAIL
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

input CreateAppSettings {
  userId: ID
}

input CreateAppSettingsInput {
  userId: ID
  clientMutationId: String!
}

type CreateAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  appSettings: AppSettings
  edge: AppSettingsEdge
  user: User
}

input CreateDataPointFloat {
  date: DateTime!
  value: Float!
}

input CreateDataPointFloatInput {
  date: DateTime!
  value: Float!
  clientMutationId: String!
}

type CreateDataPointFloatPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointFloat: DataPointFloat
  edge: DataPointFloatEdge
}

input CreateDataPointInt {
  date: DateTime!
  value: Int!
}

input CreateDataPointIntInput {
  date: DateTime!
  value: Int!
  clientMutationId: String!
}

type CreateDataPointIntPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointInt: DataPointInt
  edge: DataPointIntEdge
}

input CreateFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: FilekitchenUtensilImgKitchenUtensil
  recipeImgId: ID
  recipeImg: FilerecipeImgRecipe
}

input CreateFileInput {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: FilekitchenUtensilImgKitchenUtensil
  recipeImgId: ID
  recipeImg: FilerecipeImgRecipe
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  kitchenUtensilImg: KitchenUtensil
  recipeImg: Recipe
}

input CreateFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: FoodmealMeal
  recipeId: ID
  recipe: FoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodservingsServing!]
}

input CreateFoodInput {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: FoodmealMeal
  recipeId: ID
  recipe: FoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodservingsServing!]
  clientMutationId: String!
}

input CreateFoodItem {
  amount: Float
  ingredientId: ID
  ingredient: FoodItemingredientIngredient
  pantryItemId: ID
  pantryItem: FoodItempantryItemPantryItem
}

input CreateFoodItemInput {
  amount: Float
  ingredientId: ID
  ingredient: FoodItemingredientIngredient
  pantryItemId: ID
  pantryItem: FoodItempantryItemPantryItem
  clientMutationId: String!
}

type CreateFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItem: FoodItem
  edge: FoodItemEdge
  ingredient: Ingredient
  pantryItem: PantryItem
}

type CreateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  meal: Meal
  recipe: Recipe
}

input CreateIngredient {
  nutritionValuesId: ID
  nutritionValues: IngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: IngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [IngredientfoodItemsFoodItem!]
}

input CreateIngredientInput {
  nutritionValuesId: ID
  nutritionValues: IngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: IngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [IngredientfoodItemsFoodItem!]
  clientMutationId: String!
}

type CreateIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredient: Ingredient
  edge: IngredientEdge
  nutritionValues: NutritionValues
  recipe: Recipe
  user: User
}

input CreateKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
  img: KitchenUtensilimgFile
}

input CreateKitchenUtensilInput {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
  img: KitchenUtensilimgFile
  clientMutationId: String!
}

type CreateKitchenUtensilPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensil: KitchenUtensil
  edge: KitchenUtensilEdge
  img: File
}

input CreateLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [LimitationProfilepersonsPerson!]
}

input CreateLimitationProfileInput {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [LimitationProfilepersonsPerson!]
  clientMutationId: String!
}

type CreateLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  limitationProfile: LimitationProfile
  edge: LimitationProfileEdge
  user: User
}

input CreateMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [MealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [MealmealSettingsMealSettings!]
}

input CreateMealInput {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [MealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [MealmealSettingsMealSettings!]
  clientMutationId: String!
}

type CreateMealPayload {
  viewer: Viewer!
  clientMutationId: String!
  meal: Meal
  edge: MealEdge
  user: User
}

input CreateMealSettings {
  default: Boolean
  mealId: ID
  meal: MealSettingsmealMeal
  personId: ID
  person: MealSettingspersonPerson
}

input CreateMealSettingsInput {
  default: Boolean
  mealId: ID
  meal: MealSettingsmealMeal
  personId: ID
  person: MealSettingspersonPerson
  clientMutationId: String!
}

type CreateMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettings: MealSettings
  edge: MealSettingsEdge
  meal: Meal
  person: Person
}

input CreateMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
  microTargetDayId: ID
  microTargetDay: MicroTargetmicroTargetDayMicroTargetsDay
}

input CreateMicroTargetInput {
  max: Float
  min: Float
  name: String!
  unit: String!
  microTargetDayId: ID
  microTargetDay: MicroTargetmicroTargetDayMicroTargetsDay
  clientMutationId: String!
}

type CreateMicroTargetPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTarget: MicroTarget
  edge: MicroTargetEdge
  microTargetDay: MicroTargetsDay
}

input CreateMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsSettings: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettings
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsDaymicroTargetsMicroTarget!]
}

input CreateMicroTargetsDayInput {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsSettings: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettings
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsDaymicroTargetsMicroTarget!]
  clientMutationId: String!
}

type CreateMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsDay: MicroTargetsDay
  edge: MicroTargetsDayEdge
  microTargetsSettings: MicroTargetsSettings
}

input CreateMicroTargetsSettings {
  daily: Boolean
  personId: ID
  person: MicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input CreateMicroTargetsSettingsInput {
  daily: Boolean
  personId: ID
  person: MicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
  clientMutationId: String!
}

type CreateMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettings: MicroTargetsSettings
  edge: MicroTargetsSettingsEdge
  person: Person
}

input CreateNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettings
}

input CreateNutritionTargetsDayInput {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettings
  clientMutationId: String!
}

type CreateNutritionTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsDay: NutritionTargetsDay
  edge: NutritionTargetsDayEdge
  nutritionTargetsSettings: NutritionTargetsSettings
}

input CreateNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  person: NutritionTargetsSettingspersonPerson
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [NutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input CreateNutritionTargetsSettingsInput {
  daily: Boolean
  personId: ID
  person: NutritionTargetsSettingspersonPerson
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [NutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
  clientMutationId: String!
}

type CreateNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettings: NutritionTargetsSettings
  edge: NutritionTargetsSettingsEdge
  person: Person
}

input CreateNutritionValues {
  ingredientId: ID
  ingredient: NutritionValuesingredientIngredient
  recipeId: ID
  recipe: NutritionValuesrecipeRecipe
}

input CreateNutritionValuesInput {
  ingredientId: ID
  ingredient: NutritionValuesingredientIngredient
  recipeId: ID
  recipe: NutritionValuesrecipeRecipe
  clientMutationId: String!
}

type CreateNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionValues: NutritionValues
  edge: NutritionValuesEdge
  ingredient: Ingredient
  recipe: Recipe
}

input CreatePantryItem {
  foodItemId: ID
  foodItem: PantryItemfoodItemFoodItem
  userId: ID
}

input CreatePantryItemInput {
  foodItemId: ID
  foodItem: PantryItemfoodItemFoodItem
  userId: ID
  clientMutationId: String!
}

type CreatePantryItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItem: PantryItem
  edge: PantryItemEdge
  foodItem: FoodItem
  user: User
}

input CreatePerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: PersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonmealSettingsMealSettings!]
}

input CreatePersonalData {
  personId: ID
  person: PersonalDatapersonPerson
}

input CreatePersonalDataInput {
  personId: ID
  person: PersonalDatapersonPerson
  clientMutationId: String!
}

type CreatePersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personalData: PersonalData
  edge: PersonalDataEdge
  person: Person
}

input CreatePersonInput {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: PersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonmealSettingsMealSettings!]
  clientMutationId: String!
}

type CreatePersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  person: Person
  edge: PersonEdge
  limitationProfile: LimitationProfile
  microTargetsSettings: MicroTargetsSettings
  nutritionTargetsSettings: NutritionTargetsSettings
  personalData: PersonalData
  serving: Serving
  user: User
}

input CreateRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipefoodFood
  imgId: ID
  img: RecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPerson!]
}

input CreateRecipeInput {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipefoodFood
  imgId: ID
  img: RecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPerson!]
  clientMutationId: String!
}

type CreateRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  recipe: Recipe
  edge: RecipeEdge
  food: Food
  img: File
  nutritionValues: NutritionValues
  user: User
}

input CreateServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: ServingfoodFood
  personId: ID
  person: ServingpersonPerson
}

input CreateServingInput {
  guest: Boolean
  size: Float
  foodId: ID
  food: ServingfoodFood
  personId: ID
  person: ServingpersonPerson
  clientMutationId: String!
}

type CreateServingPayload {
  viewer: Viewer!
  clientMutationId: String!
  serving: Serving
  edge: ServingEdge
  food: Food
  person: Person
}

input CreateUser {
  kitchenUtensils: [USER_KITCHEN_UTENSILS!]
  publicName: String
  appSettingsId: ID
  limitationProfilesIds: [ID!]
  limitationProfiles: [UserlimitationProfilesLimitationProfile!]
  mealsIds: [ID!]
  meals: [UsermealsMeal!]
  pantryItemsIds: [ID!]
  pantryItems: [UserpantryItemsPantryItem!]
  personsIds: [ID!]
  persons: [UserpersonsPerson!]
  recipesIds: [ID!]
  recipes: [UserrecipesRecipe!]
  userIngredientsIds: [ID!]
  userIngredients: [UseruserIngredientsIngredient!]
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

type DataPointFloat implements Node {
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: Float!
}

# A connection to a list of items.
type DataPointFloatConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DataPointFloatEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type DataPointFloatEdge {
  # The item at the end of the edge.
  node: DataPointFloat!

  # A cursor for use in pagination.
  cursor: String!
}

input DataPointFloatFilter {
  # Logical AND on all given filters.
  AND: [DataPointFloatFilter!]

  # Logical OR on all given filters.
  OR: [DataPointFloatFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: DateTime

  # All values that are not equal to given value.
  date_not: DateTime

  # All values that are contained in given list.
  date_in: [DateTime!]

  # All values that are not contained in given list.
  date_not_in: [DateTime!]

  # All values less than the given value.
  date_lt: DateTime

  # All values less than or equal the given value.
  date_lte: DateTime

  # All values greater than the given value.
  date_gt: DateTime

  # All values greater than or equal the given value.
  date_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: Float

  # All values that are not equal to given value.
  value_not: Float

  # All values that are contained in given list.
  value_in: [Float!]

  # All values that are not contained in given list.
  value_not_in: [Float!]

  # All values less than the given value.
  value_lt: Float

  # All values less than or equal the given value.
  value_lte: Float

  # All values greater than the given value.
  value_gt: Float

  # All values greater than or equal the given value.
  value_gte: Float
}

enum DataPointFloatOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

type DataPointInt implements Node {
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: Int!
}

# A connection to a list of items.
type DataPointIntConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DataPointIntEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type DataPointIntEdge {
  # The item at the end of the edge.
  node: DataPointInt!

  # A cursor for use in pagination.
  cursor: String!
}

input DataPointIntFilter {
  # Logical AND on all given filters.
  AND: [DataPointIntFilter!]

  # Logical OR on all given filters.
  OR: [DataPointIntFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: DateTime

  # All values that are not equal to given value.
  date_not: DateTime

  # All values that are contained in given list.
  date_in: [DateTime!]

  # All values that are not contained in given list.
  date_not_in: [DateTime!]

  # All values less than the given value.
  date_lt: DateTime

  # All values less than or equal the given value.
  date_lte: DateTime

  # All values greater than the given value.
  date_gt: DateTime

  # All values greater than or equal the given value.
  date_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  value: Int

  # All values that are not equal to given value.
  value_not: Int

  # All values that are contained in given list.
  value_in: [Int!]

  # All values that are not contained in given list.
  value_not_in: [Int!]

  # All values less than the given value.
  value_lt: Int

  # All values less than or equal the given value.
  value_lte: Int

  # All values greater than the given value.
  value_gt: Int

  # All values greater than or equal the given value.
  value_gte: Int
}

enum DataPointIntOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

scalar DateTime

input DeleteAppSettingsInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  appSettings: AppSettings
  edge: AppSettingsEdge
  user: User
  deletedId: ID
}

input DeleteDataPointFloatInput {
  id: ID!
  clientMutationId: String!
}

type DeleteDataPointFloatPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointFloat: DataPointFloat
  edge: DataPointFloatEdge
  deletedId: ID
}

input DeleteDataPointIntInput {
  id: ID!
  clientMutationId: String!
}

type DeleteDataPointIntPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointInt: DataPointInt
  edge: DataPointIntEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  kitchenUtensilImg: KitchenUtensil
  recipeImg: Recipe
  deletedId: ID
}

input DeleteFoodInput {
  id: ID!
  clientMutationId: String!
}

input DeleteFoodItemInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItem: FoodItem
  edge: FoodItemEdge
  ingredient: Ingredient
  pantryItem: PantryItem
  deletedId: ID
}

type DeleteFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  meal: Meal
  recipe: Recipe
  deletedId: ID
}

input DeleteIngredientInput {
  id: ID!
  clientMutationId: String!
}

type DeleteIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredient: Ingredient
  edge: IngredientEdge
  nutritionValues: NutritionValues
  recipe: Recipe
  user: User
  deletedId: ID
}

input DeleteKitchenUtensilInput {
  id: ID!
  clientMutationId: String!
}

type DeleteKitchenUtensilPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensil: KitchenUtensil
  edge: KitchenUtensilEdge
  img: File
  deletedId: ID
}

input DeleteLimitationProfileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  limitationProfile: LimitationProfile
  edge: LimitationProfileEdge
  user: User
  deletedId: ID
}

input DeleteMealInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMealPayload {
  viewer: Viewer!
  clientMutationId: String!
  meal: Meal
  edge: MealEdge
  user: User
  deletedId: ID
}

input DeleteMealSettingsInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettings: MealSettings
  edge: MealSettingsEdge
  meal: Meal
  person: Person
  deletedId: ID
}

input DeleteMicroTargetInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMicroTargetPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTarget: MicroTarget
  edge: MicroTargetEdge
  microTargetDay: MicroTargetsDay
  deletedId: ID
}

input DeleteMicroTargetsDayInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsDay: MicroTargetsDay
  edge: MicroTargetsDayEdge
  microTargetsSettings: MicroTargetsSettings
  deletedId: ID
}

input DeleteMicroTargetsSettingsInput {
  id: ID!
  clientMutationId: String!
}

type DeleteMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettings: MicroTargetsSettings
  edge: MicroTargetsSettingsEdge
  person: Person
  deletedId: ID
}

input DeleteNutritionTargetsDayInput {
  id: ID!
  clientMutationId: String!
}

type DeleteNutritionTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsDay: NutritionTargetsDay
  edge: NutritionTargetsDayEdge
  nutritionTargetsSettings: NutritionTargetsSettings
  deletedId: ID
}

input DeleteNutritionTargetsSettingsInput {
  id: ID!
  clientMutationId: String!
}

type DeleteNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettings: NutritionTargetsSettings
  edge: NutritionTargetsSettingsEdge
  person: Person
  deletedId: ID
}

input DeleteNutritionValuesInput {
  id: ID!
  clientMutationId: String!
}

type DeleteNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionValues: NutritionValues
  edge: NutritionValuesEdge
  ingredient: Ingredient
  recipe: Recipe
  deletedId: ID
}

input DeletePantryItemInput {
  id: ID!
  clientMutationId: String!
}

type DeletePantryItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItem: PantryItem
  edge: PantryItemEdge
  foodItem: FoodItem
  user: User
  deletedId: ID
}

input DeletePersonalDataInput {
  id: ID!
  clientMutationId: String!
}

type DeletePersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personalData: PersonalData
  edge: PersonalDataEdge
  person: Person
  deletedId: ID
}

input DeletePersonInput {
  id: ID!
  clientMutationId: String!
}

type DeletePersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  person: Person
  edge: PersonEdge
  limitationProfile: LimitationProfile
  microTargetsSettings: MicroTargetsSettings
  nutritionTargetsSettings: NutritionTargetsSettings
  personalData: PersonalData
  serving: Serving
  user: User
  deletedId: ID
}

input DeleteRecipeInput {
  id: ID!
  clientMutationId: String!
}

type DeleteRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  recipe: Recipe
  edge: RecipeEdge
  food: Food
  img: File
  nutritionValues: NutritionValues
  user: User
  deletedId: ID
}

input DeleteServingInput {
  id: ID!
  clientMutationId: String!
}

type DeleteServingPayload {
  viewer: Viewer!
  clientMutationId: String!
  serving: Serving
  edge: ServingEdge
  food: Food
  person: Person
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  appSettings: AppSettings
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  kitchenUtensilImg(filter: KitchenUtensilFilter): KitchenUtensil
  name: String!
  recipeImg(filter: RecipeFilter): Recipe
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  kitchenUtensilImg: KitchenUtensilFilter
  recipeImg: RecipeFilter
}

input FilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

input FilerecipeImgRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: FilerecipeImgRecipefoodFood
  nutritionValuesId: ID
  nutritionValues: FilerecipeImgRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [FilerecipeImgRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [FilerecipeImgRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [FilerecipeImgRecipelikedByPerson!]
}

input FilerecipeImgRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: FilerecipeImgRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: FilerecipeImgRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: FilerecipeImgRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: FilerecipeImgRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: FilerecipeImgRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [FilerecipeImgRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [FilerecipeImgRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [FilerecipeImgRecipedislikedByPersonmealSettingsMealSettings!]
}

input FilerecipeImgRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FilerecipeImgRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FilerecipeImgRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input FilerecipeImgRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FilerecipeImgRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input FilerecipeImgRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input FilerecipeImgRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input FilerecipeImgRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FilerecipeImgRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: FilerecipeImgRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [FilerecipeImgRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FilerecipeImgRecipefoodFoodservingsServing!]
}

input FilerecipeImgRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input FilerecipeImgRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input FilerecipeImgRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FilerecipeImgRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: FilerecipeImgRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [FilerecipeImgRecipeingredientsIngredientfoodItemsFoodItem!]
}

input FilerecipeImgRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input FilerecipeImgRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input FilerecipeImgRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: FilerecipeImgRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: FilerecipeImgRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: FilerecipeImgRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: FilerecipeImgRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: FilerecipeImgRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [FilerecipeImgRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [FilerecipeImgRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [FilerecipeImgRecipelikedByPersonmealSettingsMealSettings!]
}

input FilerecipeImgRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FilerecipeImgRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FilerecipeImgRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input FilerecipeImgRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FilerecipeImgRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input FilerecipeImgRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input FilerecipeImgRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input FilerecipeImgRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FilerecipeImgRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: FilerecipeImgRecipenutritionValuesNutritionValuesingredientIngredient
}

input FilerecipeImgRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

type Food implements Node {
  createdAt: DateTime!
  eaten: Boolean!
  id: ID!
  leftovers(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection
  meal(filter: MealFilter): Meal
  pos: Int!
  recipe(filter: RecipeFilter): Recipe
  servings(filter: ServingFilter, orderBy: ServingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ServingConnection
  updatedAt: DateTime!
}

# A connection to a list of items.
type FoodConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FoodEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FoodEdge {
  # The item at the end of the edge.
  node: Food!

  # A cursor for use in pagination.
  cursor: String!
}

input FoodFilter {
  # Logical AND on all given filters.
  AND: [FoodFilter!]

  # Logical OR on all given filters.
  OR: [FoodFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  eaten: Boolean

  # All values that are not equal to given value.
  eaten_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  pos: Int

  # All values that are not equal to given value.
  pos_not: Int

  # All values that are contained in given list.
  pos_in: [Int!]

  # All values that are not contained in given list.
  pos_not_in: [Int!]

  # All values less than the given value.
  pos_lt: Int

  # All values less than or equal the given value.
  pos_lte: Int

  # All values greater than the given value.
  pos_gt: Int

  # All values greater than or equal the given value.
  pos_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  leftovers_every: FoodFilter
  leftovers_some: FoodFilter
  leftovers_none: FoodFilter
  meal: MealFilter
  recipe: RecipeFilter
  servings_every: ServingFilter
  servings_some: ServingFilter
  servings_none: ServingFilter
}

# an ingredient with a given amount
type FoodItem implements Node {
  amount: Float!
  createdAt: DateTime!
  id: ID!
  ingredient(filter: IngredientFilter): Ingredient
  pantryItem(filter: PantryItemFilter): PantryItem
  updatedAt: DateTime!
}

# A connection to a list of items.
type FoodItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FoodItemEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FoodItemEdge {
  # The item at the end of the edge.
  node: FoodItem!

  # A cursor for use in pagination.
  cursor: String!
}

input FoodItemFilter {
  # Logical AND on all given filters.
  AND: [FoodItemFilter!]

  # Logical OR on all given filters.
  OR: [FoodItemFilter!]
  amount: Float

  # All values that are not equal to given value.
  amount_not: Float

  # All values that are contained in given list.
  amount_in: [Float!]

  # All values that are not contained in given list.
  amount_not_in: [Float!]

  # All values less than the given value.
  amount_lt: Float

  # All values less than or equal the given value.
  amount_lte: Float

  # All values greater than the given value.
  amount_gt: Float

  # All values greater than or equal the given value.
  amount_gte: Float
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  ingredient: IngredientFilter
  pantryItem: PantryItemFilter
}

input FoodItemingredientIngredient {
  nutritionValuesId: ID
  nutritionValues: FoodItemingredientIngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: FoodItemingredientIngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [FoodItemingredientIngredientfoodItemsFoodItem!]
}

input FoodItemingredientIngredientfoodItemsFoodItem {
  amount: Float
  pantryItemId: ID
  pantryItem: FoodItemingredientIngredientfoodItemsFoodItempantryItemPantryItem
}

input FoodItemingredientIngredientfoodItemsFoodItempantryItemPantryItem {
  foodItemId: ID
  userId: ID
}

input FoodItemingredientIngredientnutritionValuesNutritionValues {
  recipeId: ID
  recipe: FoodItemingredientIngredientnutritionValuesNutritionValuesrecipeRecipe
}

input FoodItemingredientIngredientnutritionValuesNutritionValuesrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodItemingredientIngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: FoodItemingredientIngredientrecipeRecipefoodFood
  imgId: ID
  img: FoodItemingredientIngredientrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: FoodItemingredientIngredientrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [FoodItemingredientIngredientrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [FoodItemingredientIngredientrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [FoodItemingredientIngredientrecipeRecipelikedByPerson!]
}

input FoodItemingredientIngredientrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodItemingredientIngredientrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input FoodItemingredientIngredientrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input FoodItemingredientIngredientrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input FoodItemingredientIngredientrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodItemingredientIngredientrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

enum FoodItemOrderBy {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FoodItempantryItemPantryItem {
  userId: ID
}

input FoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: FoodleftoversFoodmealMeal
  recipeId: ID
  recipe: FoodleftoversFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodleftoversFoodservingsServing!]
}

input FoodleftoversFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: FoodleftoversFoodleftoversFoodmealMeal
  recipeId: ID
  recipe: FoodleftoversFoodleftoversFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFoodleftoversFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodleftoversFoodleftoversFoodservingsServing!]
}

input FoodleftoversFoodleftoversFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input FoodleftoversFoodleftoversFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodleftoversFoodleftoversFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodleftoversFoodleftoversFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FoodleftoversFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [FoodleftoversFoodmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [FoodleftoversFoodmealMealmealSettingsMealSettings!]
}

input FoodleftoversFoodmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input FoodleftoversFoodmealMealmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FoodleftoversFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  imgId: ID
  img: FoodleftoversFoodrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: FoodleftoversFoodrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [FoodleftoversFoodrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [FoodleftoversFoodrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [FoodleftoversFoodrecipeRecipelikedByPerson!]
}

input FoodleftoversFoodrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodleftoversFoodrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input FoodleftoversFoodrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input FoodleftoversFoodrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodleftoversFoodrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input FoodleftoversFoodservingsServing {
  guest: Boolean
  size: Float
  personId: ID
  person: FoodleftoversFoodservingsServingpersonPerson
}

input FoodleftoversFoodservingsServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input FoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [FoodmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [FoodmealMealmealSettingsMealSettings!]
}

input FoodmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  recipeId: ID
  recipe: FoodmealMealfoodsFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodmealMealfoodsFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodmealMealfoodsFoodservingsServing!]
}

input FoodmealMealfoodsFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input FoodmealMealfoodsFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodmealMealfoodsFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FoodmealMealmealSettingsMealSettings {
  default: Boolean
  personId: ID
  person: FoodmealMealmealSettingsMealSettingspersonPerson
}

input FoodmealMealmealSettingsMealSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum FoodOrderBy {
  createdAt_ASC
  createdAt_DESC
  eaten_ASC
  eaten_DESC
  id_ASC
  id_DESC
  pos_ASC
  pos_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  imgId: ID
  img: FoodrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: FoodrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [FoodrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [FoodrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [FoodrecipeRecipelikedByPerson!]
}

input FoodrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: FoodrecipeRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: FoodrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: FoodrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: FoodrecipeRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: FoodrecipeRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [FoodrecipeRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [FoodrecipeRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [FoodrecipeRecipedislikedByPersonmealSettingsMealSettings!]
}

input FoodrecipeRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodrecipeRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodrecipeRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input FoodrecipeRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FoodrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input FoodrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input FoodrecipeRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input FoodrecipeRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FoodrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: FoodrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input FoodrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input FoodrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: FoodrecipeRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [FoodrecipeRecipeingredientsIngredientfoodItemsFoodItem!]
}

input FoodrecipeRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input FoodrecipeRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input FoodrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: FoodrecipeRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: FoodrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: FoodrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: FoodrecipeRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: FoodrecipeRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [FoodrecipeRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [FoodrecipeRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [FoodrecipeRecipelikedByPersonmealSettingsMealSettings!]
}

input FoodrecipeRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodrecipeRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodrecipeRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input FoodrecipeRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FoodrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input FoodrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input FoodrecipeRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input FoodrecipeRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input FoodrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: FoodrecipeRecipenutritionValuesNutritionValuesingredientIngredient
}

input FoodrecipeRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input FoodservingsServing {
  guest: Boolean
  size: Float
  personId: ID
  person: FoodservingsServingpersonPerson
}

input FoodservingsServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: FoodservingsServingpersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: FoodservingsServingpersonPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: FoodservingsServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: FoodservingsServingpersonPersonpersonalDataPersonalData
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [FoodservingsServingpersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [FoodservingsServingpersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [FoodservingsServingpersonPersonmealSettingsMealSettings!]
}

input FoodservingsServingpersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodservingsServingpersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input FoodservingsServingpersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input FoodservingsServingpersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input FoodservingsServingpersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input FoodservingsServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input FoodservingsServingpersonPersonpersonalDataPersonalData {
  personId: ID
}

type Ingredient implements Node {
  createdAt: DateTime!
  foodItems(filter: FoodItemFilter, orderBy: FoodItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodItemConnection
  id: ID!
  nutritionValues(filter: NutritionValuesFilter): NutritionValues
  recipe(filter: RecipeFilter): Recipe
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

# A connection to a list of items.
type IngredientConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IngredientEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type IngredientEdge {
  # The item at the end of the edge.
  node: Ingredient!

  # A cursor for use in pagination.
  cursor: String!
}

input IngredientFilter {
  # Logical AND on all given filters.
  AND: [IngredientFilter!]

  # Logical OR on all given filters.
  OR: [IngredientFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  foodItems_every: FoodItemFilter
  foodItems_some: FoodItemFilter
  foodItems_none: FoodItemFilter
  nutritionValues: NutritionValuesFilter
  recipe: RecipeFilter
  user: UserFilter
}

input IngredientfoodItemsFoodItem {
  amount: Float
  pantryItemId: ID
  pantryItem: IngredientfoodItemsFoodItempantryItemPantryItem
}

input IngredientfoodItemsFoodItempantryItemPantryItem {
  userId: ID
}

input IngredientnutritionValuesNutritionValues {
  recipeId: ID
  recipe: IngredientnutritionValuesNutritionValuesrecipeRecipe
}

input IngredientnutritionValuesNutritionValuesrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: IngredientnutritionValuesNutritionValuesrecipeRecipefoodFood
  imgId: ID
  img: IngredientnutritionValuesNutritionValuesrecipeRecipeimgFile
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [IngredientnutritionValuesNutritionValuesrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [IngredientnutritionValuesNutritionValuesrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [IngredientnutritionValuesNutritionValuesrecipeRecipelikedByPerson!]
}

input IngredientnutritionValuesNutritionValuesrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input IngredientnutritionValuesNutritionValuesrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input IngredientnutritionValuesNutritionValuesrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input IngredientnutritionValuesNutritionValuesrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input IngredientnutritionValuesNutritionValuesrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum IngredientOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input IngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: IngredientrecipeRecipefoodFood
  imgId: ID
  img: IngredientrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: IngredientrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [IngredientrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [IngredientrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [IngredientrecipeRecipelikedByPerson!]
}

input IngredientrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: IngredientrecipeRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: IngredientrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: IngredientrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: IngredientrecipeRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: IngredientrecipeRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [IngredientrecipeRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [IngredientrecipeRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [IngredientrecipeRecipedislikedByPersonmealSettingsMealSettings!]
}

input IngredientrecipeRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input IngredientrecipeRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input IngredientrecipeRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input IngredientrecipeRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input IngredientrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input IngredientrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input IngredientrecipeRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input IngredientrecipeRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input IngredientrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: IngredientrecipeRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [IngredientrecipeRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [IngredientrecipeRecipefoodFoodservingsServing!]
}

input IngredientrecipeRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input IngredientrecipeRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input IngredientrecipeRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input IngredientrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: IngredientrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input IngredientrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input IngredientrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: IngredientrecipeRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [IngredientrecipeRecipeingredientsIngredientfoodItemsFoodItem!]
}

input IngredientrecipeRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input IngredientrecipeRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input IngredientrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: IngredientrecipeRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: IngredientrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: IngredientrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: IngredientrecipeRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: IngredientrecipeRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [IngredientrecipeRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [IngredientrecipeRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [IngredientrecipeRecipelikedByPersonmealSettingsMealSettings!]
}

input IngredientrecipeRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input IngredientrecipeRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input IngredientrecipeRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input IngredientrecipeRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input IngredientrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input IngredientrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input IngredientrecipeRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input IngredientrecipeRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input IngredientrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: IngredientrecipeRecipenutritionValuesNutritionValuesingredientIngredient
}

input IngredientrecipeRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

enum KITCHEN_UTENSIL_TYPE {
  Pan
  Oven
}

type KitchenUtensil implements Node {
  createdAt: DateTime!
  id: ID!
  img(filter: FileFilter): File
  type: KITCHEN_UTENSIL_TYPE!
  updatedAt: DateTime!
}

# A connection to a list of items.
type KitchenUtensilConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [KitchenUtensilEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type KitchenUtensilEdge {
  # The item at the end of the edge.
  node: KitchenUtensil!

  # A cursor for use in pagination.
  cursor: String!
}

input KitchenUtensilFilter {
  # Logical AND on all given filters.
  AND: [KitchenUtensilFilter!]

  # Logical OR on all given filters.
  OR: [KitchenUtensilFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  type: KITCHEN_UTENSIL_TYPE

  # All values that are not equal to given value.
  type_not: KITCHEN_UTENSIL_TYPE

  # All values that are contained in given list.
  type_in: [KITCHEN_UTENSIL_TYPE!]

  # All values that are not contained in given list.
  type_not_in: [KITCHEN_UTENSIL_TYPE!]
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  img: FileFilter
}

input KitchenUtensilimgFile {
  name: String!
  recipeImgId: ID
  recipeImg: KitchenUtensilimgFilerecipeImgRecipe
}

input KitchenUtensilimgFilerecipeImgRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: KitchenUtensilimgFilerecipeImgRecipefoodFood
  nutritionValuesId: ID
  nutritionValues: KitchenUtensilimgFilerecipeImgRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [KitchenUtensilimgFilerecipeImgRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [KitchenUtensilimgFilerecipeImgRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [KitchenUtensilimgFilerecipeImgRecipelikedByPerson!]
}

input KitchenUtensilimgFilerecipeImgRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input KitchenUtensilimgFilerecipeImgRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input KitchenUtensilimgFilerecipeImgRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input KitchenUtensilimgFilerecipeImgRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input KitchenUtensilimgFilerecipeImgRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

enum KitchenUtensilOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LimitationProfile implements Node {
  createdAt: DateTime!
  id: ID!
  name: String!
  persons(filter: PersonFilter, orderBy: PersonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

# A connection to a list of items.
type LimitationProfileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LimitationProfileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type LimitationProfileEdge {
  # The item at the end of the edge.
  node: LimitationProfile!

  # A cursor for use in pagination.
  cursor: String!
}

input LimitationProfileFilter {
  # Logical AND on all given filters.
  AND: [LimitationProfileFilter!]

  # Logical OR on all given filters.
  OR: [LimitationProfileFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  persons_every: PersonFilter
  persons_some: PersonFilter
  persons_none: PersonFilter
  user: UserFilter
}

enum LimitationProfileOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input LimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  microTargetsSettingsId: ID
  microTargetsSettings: LimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: LimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: LimitationProfilepersonsPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [LimitationProfilepersonsPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [LimitationProfilepersonsPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [LimitationProfilepersonsPersonmealSettingsMealSettings!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: LimitationProfilepersonsPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: LimitationProfilepersonsPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: LimitationProfilepersonsPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [LimitationProfilepersonsPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [LimitationProfilepersonsPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [LimitationProfilepersonsPersondislikedRecipesRecipelikedByPerson!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input LimitationProfilepersonsPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input LimitationProfilepersonsPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input LimitationProfilepersonsPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: LimitationProfilepersonsPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: LimitationProfilepersonsPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: LimitationProfilepersonsPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [LimitationProfilepersonsPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [LimitationProfilepersonsPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [LimitationProfilepersonsPersonlikedRecipesRecipelikedByPerson!]
}

input LimitationProfilepersonsPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input LimitationProfilepersonsPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input LimitationProfilepersonsPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input LimitationProfilepersonsPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input LimitationProfilepersonsPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input LimitationProfilepersonsPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input LimitationProfilepersonsPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: LimitationProfilepersonsPersonmealSettingsMealSettingsmealMeal
}

input LimitationProfilepersonsPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input LimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [LimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input LimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input LimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [LimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input LimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input LimitationProfilepersonsPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: LimitationProfilepersonsPersonservingServingfoodFood
}

input LimitationProfilepersonsPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

# Meal that is eaten every day
type Meal implements Node {
  createdAt: DateTime!
  date: DateTime!
  foods(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection
  id: ID!
  mealSettings(filter: MealSettingsFilter, orderBy: MealSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MealSettingsConnection
  name: String!
  order: Int
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

# A connection to a list of items.
type MealConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MealEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MealEdge {
  # The item at the end of the edge.
  node: Meal!

  # A cursor for use in pagination.
  cursor: String!
}

input MealFilter {
  # Logical AND on all given filters.
  AND: [MealFilter!]

  # Logical OR on all given filters.
  OR: [MealFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: DateTime

  # All values that are not equal to given value.
  date_not: DateTime

  # All values that are contained in given list.
  date_in: [DateTime!]

  # All values that are not contained in given list.
  date_not_in: [DateTime!]

  # All values less than the given value.
  date_lt: DateTime

  # All values less than or equal the given value.
  date_lte: DateTime

  # All values greater than the given value.
  date_gt: DateTime

  # All values greater than or equal the given value.
  date_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  order: Int

  # All values that are not equal to given value.
  order_not: Int

  # All values that are contained in given list.
  order_in: [Int!]

  # All values that are not contained in given list.
  order_not_in: [Int!]

  # All values less than the given value.
  order_lt: Int

  # All values less than or equal the given value.
  order_lte: Int

  # All values greater than the given value.
  order_gt: Int

  # All values greater than or equal the given value.
  order_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  foods_every: FoodFilter
  foods_some: FoodFilter
  foods_none: FoodFilter
  mealSettings_every: MealSettingsFilter
  mealSettings_some: MealSettingsFilter
  mealSettings_none: MealSettingsFilter
  user: UserFilter
}

input MealfoodsFood {
  eaten: Boolean
  pos: Int
  recipeId: ID
  recipe: MealfoodsFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [MealfoodsFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [MealfoodsFoodservingsServing!]
}

input MealfoodsFoodleftoversFood {
  eaten: Boolean
  pos: Int
  recipeId: ID
  recipe: MealfoodsFoodleftoversFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [MealfoodsFoodleftoversFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [MealfoodsFoodleftoversFoodservingsServing!]
}

input MealfoodsFoodleftoversFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MealfoodsFoodleftoversFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MealfoodsFoodleftoversFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input MealfoodsFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  imgId: ID
  img: MealfoodsFoodrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: MealfoodsFoodrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [MealfoodsFoodrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [MealfoodsFoodrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [MealfoodsFoodrecipeRecipelikedByPerson!]
}

input MealfoodsFoodrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealfoodsFoodrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input MealfoodsFoodrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input MealfoodsFoodrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealfoodsFoodrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input MealfoodsFoodservingsServing {
  guest: Boolean
  size: Float
  personId: ID
  person: MealfoodsFoodservingsServingpersonPerson
}

input MealfoodsFoodservingsServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealmealSettingsMealSettings {
  default: Boolean
  personId: ID
  person: MealmealSettingsMealSettingspersonPerson
}

input MealmealSettingsMealSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: MealmealSettingsMealSettingspersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: MealmealSettingsMealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: MealmealSettingsMealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: MealmealSettingsMealSettingspersonPersonpersonalDataPersonalData
  servingId: ID
  serving: MealmealSettingsMealSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [MealmealSettingsMealSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [MealmealSettingsMealSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [MealmealSettingsMealSettingspersonPersonmealSettingsMealSettings!]
}

input MealmealSettingsMealSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MealmealSettingsMealSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MealmealSettingsMealSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input MealmealSettingsMealSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input MealmealSettingsMealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input MealmealSettingsMealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input MealmealSettingsMealSettingspersonPersonpersonalDataPersonalData {
  personId: ID
}

input MealmealSettingsMealSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

enum MealOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  order_ASC
  order_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MealSettings implements Node {
  createdAt: DateTime!
  default: Boolean!
  id: ID!
  meal(filter: MealFilter): Meal
  person(filter: PersonFilter): Person
  updatedAt: DateTime!
}

# A connection to a list of items.
type MealSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MealSettingsEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MealSettingsEdge {
  # The item at the end of the edge.
  node: MealSettings!

  # A cursor for use in pagination.
  cursor: String!
}

input MealSettingsFilter {
  # Logical AND on all given filters.
  AND: [MealSettingsFilter!]

  # Logical OR on all given filters.
  OR: [MealSettingsFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  default: Boolean

  # All values that are not equal to given value.
  default_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  meal: MealFilter
  person: PersonFilter
}

input MealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [MealSettingsmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [MealSettingsmealMealmealSettingsMealSettings!]
}

input MealSettingsmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  recipeId: ID
  recipe: MealSettingsmealMealfoodsFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [MealSettingsmealMealfoodsFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [MealSettingsmealMealfoodsFoodservingsServing!]
}

input MealSettingsmealMealfoodsFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MealSettingsmealMealfoodsFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MealSettingsmealMealfoodsFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input MealSettingsmealMealmealSettingsMealSettings {
  default: Boolean
  personId: ID
  person: MealSettingsmealMealmealSettingsMealSettingspersonPerson
}

input MealSettingsmealMealmealSettingsMealSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum MealSettingsOrderBy {
  createdAt_ASC
  createdAt_DESC
  default_ASC
  default_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MealSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: MealSettingspersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: MealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: MealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: MealSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [MealSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [MealSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [MealSettingspersonPersonmealSettingsMealSettings!]
}

input MealSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: MealSettingspersonPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: MealSettingspersonPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: MealSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [MealSettingspersonPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [MealSettingspersonPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [MealSettingspersonPersondislikedRecipesRecipelikedByPerson!]
}

input MealSettingspersonPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MealSettingspersonPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input MealSettingspersonPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input MealSettingspersonPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input MealSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: MealSettingspersonPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: MealSettingspersonPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: MealSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [MealSettingspersonPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [MealSettingspersonPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [MealSettingspersonPersonlikedRecipesRecipelikedByPerson!]
}

input MealSettingspersonPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MealSettingspersonPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input MealSettingspersonPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input MealSettingspersonPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input MealSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [MealSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input MealSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: MealSettingspersonPersonmealSettingsMealSettingsmealMeal
}

input MealSettingspersonPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input MealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input MealSettingspersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input MealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [MealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input MealSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input MealSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: MealSettingspersonPersonservingServingfoodFood
}

input MealSettingspersonPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

enum MICRO_TARGETS_DAY_DAY {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
  All
}

# target values for a micro target, vitamins etc
type MicroTarget implements Node {
  createdAt: DateTime!
  id: ID!
  max: Float!
  microTargetDay(filter: MicroTargetsDayFilter): MicroTargetsDay
  min: Float!
  name: String!
  unit: String!
  updatedAt: DateTime!
}

# A connection to a list of items.
type MicroTargetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MicroTargetEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MicroTargetEdge {
  # The item at the end of the edge.
  node: MicroTarget!

  # A cursor for use in pagination.
  cursor: String!
}

input MicroTargetFilter {
  # Logical AND on all given filters.
  AND: [MicroTargetFilter!]

  # Logical OR on all given filters.
  OR: [MicroTargetFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  max: Float

  # All values that are not equal to given value.
  max_not: Float

  # All values that are contained in given list.
  max_in: [Float!]

  # All values that are not contained in given list.
  max_not_in: [Float!]

  # All values less than the given value.
  max_lt: Float

  # All values less than or equal the given value.
  max_lte: Float

  # All values greater than the given value.
  max_gt: Float

  # All values greater than or equal the given value.
  max_gte: Float
  min: Float

  # All values that are not equal to given value.
  min_not: Float

  # All values that are contained in given list.
  min_in: [Float!]

  # All values that are not contained in given list.
  min_not_in: [Float!]

  # All values less than the given value.
  min_lt: Float

  # All values less than or equal the given value.
  min_lte: Float

  # All values greater than the given value.
  min_gt: Float

  # All values greater than or equal the given value.
  min_gte: Float
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  unit: String

  # All values that are not equal to given value.
  unit_not: String

  # All values that are contained in given list.
  unit_in: [String!]

  # All values that are not contained in given list.
  unit_not_in: [String!]

  # All values less than the given value.
  unit_lt: String

  # All values less than or equal the given value.
  unit_lte: String

  # All values greater than the given value.
  unit_gt: String

  # All values greater than or equal the given value.
  unit_gte: String

  # All values containing the given string.
  unit_contains: String

  # All values not containing the given string.
  unit_not_contains: String

  # All values starting with the given string.
  unit_starts_with: String

  # All values not starting with the given string.
  unit_not_starts_with: String

  # All values ending with the given string.
  unit_ends_with: String

  # All values not ending with the given string.
  unit_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  microTargetDay: MicroTargetsDayFilter
}

input MicroTargetmicroTargetDayMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsSettings: MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettings
  microTargetsIds: [ID!]
  microTargets: [MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsMicroTarget!]
}

input MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
}

input MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  person: MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input MicroTargetmicroTargetDayMicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum MicroTargetOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  max_ASC
  max_DESC
  min_ASC
  min_DESC
  name_ASC
  name_DESC
  unit_ASC
  unit_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MicroTargetsDay implements Node {
  createdAt: DateTime!
  day: MICRO_TARGETS_DAY_DAY!
  id: ID!
  microTargets(filter: MicroTargetFilter, orderBy: MicroTargetOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MicroTargetConnection
  microTargetsSettings(filter: MicroTargetsSettingsFilter): MicroTargetsSettings
  updatedAt: DateTime!
}

# A connection to a list of items.
type MicroTargetsDayConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MicroTargetsDayEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MicroTargetsDayEdge {
  # The item at the end of the edge.
  node: MicroTargetsDay!

  # A cursor for use in pagination.
  cursor: String!
}

input MicroTargetsDayFilter {
  # Logical AND on all given filters.
  AND: [MicroTargetsDayFilter!]

  # Logical OR on all given filters.
  OR: [MicroTargetsDayFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  day: MICRO_TARGETS_DAY_DAY

  # All values that are not equal to given value.
  day_not: MICRO_TARGETS_DAY_DAY

  # All values that are contained in given list.
  day_in: [MICRO_TARGETS_DAY_DAY!]

  # All values that are not contained in given list.
  day_not_in: [MICRO_TARGETS_DAY_DAY!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  microTargets_every: MicroTargetFilter
  microTargets_some: MicroTargetFilter
  microTargets_none: MicroTargetFilter
  microTargetsSettings: MicroTargetsSettingsFilter
}

input MicroTargetsDaymicroTargetsMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  person: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
  microTargetDayId: ID
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonlimitationProfileLimitationProfile
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonpersonalDataPersonalData
  servingId: ID
  serving: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonmealSettingsMealSettings!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonpersonalDataPersonalData {
  personId: ID
}

input MicroTargetsDaymicroTargetsSettingsMicroTargetsSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

enum MicroTargetsDayOrderBy {
  createdAt_ASC
  createdAt_DESC
  day_ASC
  day_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MicroTargetsSettings implements Node {
  createdAt: DateTime!
  daily: Boolean!
  id: ID!
  microTargetsDays(filter: MicroTargetsDayFilter, orderBy: MicroTargetsDayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MicroTargetsDayConnection
  person(filter: PersonFilter): Person
  updatedAt: DateTime!
}

# A connection to a list of items.
type MicroTargetsSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MicroTargetsSettingsEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type MicroTargetsSettingsEdge {
  # The item at the end of the edge.
  node: MicroTargetsSettings!

  # A cursor for use in pagination.
  cursor: String!
}

input MicroTargetsSettingsFilter {
  # Logical AND on all given filters.
  AND: [MicroTargetsSettingsFilter!]

  # Logical OR on all given filters.
  OR: [MicroTargetsSettingsFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  daily: Boolean

  # All values that are not equal to given value.
  daily_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  microTargetsDays_every: MicroTargetsDayFilter
  microTargetsDays_some: MicroTargetsDayFilter
  microTargetsDays_none: MicroTargetsDayFilter
  person: PersonFilter
}

input MicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget!]
}

input MicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
}

enum MicroTargetsSettingsOrderBy {
  createdAt_ASC
  createdAt_DESC
  daily_ASC
  daily_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MicroTargetsSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: MicroTargetsSettingspersonPersonlimitationProfileLimitationProfile
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: MicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: MicroTargetsSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [MicroTargetsSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [MicroTargetsSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [MicroTargetsSettingspersonPersonmealSettingsMealSettings!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: MicroTargetsSettingspersonPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: MicroTargetsSettingspersonPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: MicroTargetsSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [MicroTargetsSettingspersonPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [MicroTargetsSettingspersonPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [MicroTargetsSettingspersonPersondislikedRecipesRecipelikedByPerson!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: MicroTargetsSettingspersonPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: MicroTargetsSettingspersonPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: MicroTargetsSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [MicroTargetsSettingspersonPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [MicroTargetsSettingspersonPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [MicroTargetsSettingspersonPersonlikedRecipesRecipelikedByPerson!]
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input MicroTargetsSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [MicroTargetsSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input MicroTargetsSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: MicroTargetsSettingspersonPersonmealSettingsMealSettingsmealMeal
}

input MicroTargetsSettingspersonPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input MicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [MicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input MicroTargetsSettingspersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input MicroTargetsSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: MicroTargetsSettingspersonPersonservingServingfoodFood
}

input MicroTargetsSettingspersonPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

type Mutation {
  createAppSettings(input: CreateAppSettingsInput!): CreateAppSettingsPayload
  createDataPointFloat(input: CreateDataPointFloatInput!): CreateDataPointFloatPayload
  createDataPointInt(input: CreateDataPointIntInput!): CreateDataPointIntPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createFood(input: CreateFoodInput!): CreateFoodPayload
  createFoodItem(input: CreateFoodItemInput!): CreateFoodItemPayload
  createIngredient(input: CreateIngredientInput!): CreateIngredientPayload
  createKitchenUtensil(input: CreateKitchenUtensilInput!): CreateKitchenUtensilPayload
  createLimitationProfile(input: CreateLimitationProfileInput!): CreateLimitationProfilePayload
  createMeal(input: CreateMealInput!): CreateMealPayload
  createMealSettings(input: CreateMealSettingsInput!): CreateMealSettingsPayload
  createMicroTarget(input: CreateMicroTargetInput!): CreateMicroTargetPayload
  createMicroTargetsDay(input: CreateMicroTargetsDayInput!): CreateMicroTargetsDayPayload
  createMicroTargetsSettings(input: CreateMicroTargetsSettingsInput!): CreateMicroTargetsSettingsPayload
  createNutritionTargetsDay(input: CreateNutritionTargetsDayInput!): CreateNutritionTargetsDayPayload
  createNutritionTargetsSettings(input: CreateNutritionTargetsSettingsInput!): CreateNutritionTargetsSettingsPayload
  createNutritionValues(input: CreateNutritionValuesInput!): CreateNutritionValuesPayload
  createPantryItem(input: CreatePantryItemInput!): CreatePantryItemPayload
  createPerson(input: CreatePersonInput!): CreatePersonPayload
  createPersonalData(input: CreatePersonalDataInput!): CreatePersonalDataPayload
  createRecipe(input: CreateRecipeInput!): CreateRecipePayload
  createServing(input: CreateServingInput!): CreateServingPayload
  updateAppSettings(input: UpdateAppSettingsInput!): UpdateAppSettingsPayload
  updateDataPointFloat(input: UpdateDataPointFloatInput!): UpdateDataPointFloatPayload
  updateDataPointInt(input: UpdateDataPointIntInput!): UpdateDataPointIntPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updateFood(input: UpdateFoodInput!): UpdateFoodPayload
  updateFoodItem(input: UpdateFoodItemInput!): UpdateFoodItemPayload
  updateIngredient(input: UpdateIngredientInput!): UpdateIngredientPayload
  updateKitchenUtensil(input: UpdateKitchenUtensilInput!): UpdateKitchenUtensilPayload
  updateLimitationProfile(input: UpdateLimitationProfileInput!): UpdateLimitationProfilePayload
  updateMeal(input: UpdateMealInput!): UpdateMealPayload
  updateMealSettings(input: UpdateMealSettingsInput!): UpdateMealSettingsPayload
  updateMicroTarget(input: UpdateMicroTargetInput!): UpdateMicroTargetPayload
  updateMicroTargetsDay(input: UpdateMicroTargetsDayInput!): UpdateMicroTargetsDayPayload
  updateMicroTargetsSettings(input: UpdateMicroTargetsSettingsInput!): UpdateMicroTargetsSettingsPayload
  updateNutritionTargetsDay(input: UpdateNutritionTargetsDayInput!): UpdateNutritionTargetsDayPayload
  updateNutritionTargetsSettings(input: UpdateNutritionTargetsSettingsInput!): UpdateNutritionTargetsSettingsPayload
  updateNutritionValues(input: UpdateNutritionValuesInput!): UpdateNutritionValuesPayload
  updatePantryItem(input: UpdatePantryItemInput!): UpdatePantryItemPayload
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload
  updatePersonalData(input: UpdatePersonalDataInput!): UpdatePersonalDataPayload
  updateRecipe(input: UpdateRecipeInput!): UpdateRecipePayload
  updateServing(input: UpdateServingInput!): UpdateServingPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateAppSettings(input: UpdateOrCreateAppSettingsInput!): UpdateOrCreateAppSettingsPayload
  updateOrCreateDataPointFloat(input: UpdateOrCreateDataPointFloatInput!): UpdateOrCreateDataPointFloatPayload
  updateOrCreateDataPointInt(input: UpdateOrCreateDataPointIntInput!): UpdateOrCreateDataPointIntPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreateFood(input: UpdateOrCreateFoodInput!): UpdateOrCreateFoodPayload
  updateOrCreateFoodItem(input: UpdateOrCreateFoodItemInput!): UpdateOrCreateFoodItemPayload
  updateOrCreateIngredient(input: UpdateOrCreateIngredientInput!): UpdateOrCreateIngredientPayload
  updateOrCreateKitchenUtensil(input: UpdateOrCreateKitchenUtensilInput!): UpdateOrCreateKitchenUtensilPayload
  updateOrCreateLimitationProfile(input: UpdateOrCreateLimitationProfileInput!): UpdateOrCreateLimitationProfilePayload
  updateOrCreateMeal(input: UpdateOrCreateMealInput!): UpdateOrCreateMealPayload
  updateOrCreateMealSettings(input: UpdateOrCreateMealSettingsInput!): UpdateOrCreateMealSettingsPayload
  updateOrCreateMicroTarget(input: UpdateOrCreateMicroTargetInput!): UpdateOrCreateMicroTargetPayload
  updateOrCreateMicroTargetsDay(input: UpdateOrCreateMicroTargetsDayInput!): UpdateOrCreateMicroTargetsDayPayload
  updateOrCreateMicroTargetsSettings(input: UpdateOrCreateMicroTargetsSettingsInput!): UpdateOrCreateMicroTargetsSettingsPayload
  updateOrCreateNutritionTargetsDay(input: UpdateOrCreateNutritionTargetsDayInput!): UpdateOrCreateNutritionTargetsDayPayload
  updateOrCreateNutritionTargetsSettings(input: UpdateOrCreateNutritionTargetsSettingsInput!): UpdateOrCreateNutritionTargetsSettingsPayload
  updateOrCreateNutritionValues(input: UpdateOrCreateNutritionValuesInput!): UpdateOrCreateNutritionValuesPayload
  updateOrCreatePantryItem(input: UpdateOrCreatePantryItemInput!): UpdateOrCreatePantryItemPayload
  updateOrCreatePerson(input: UpdateOrCreatePersonInput!): UpdateOrCreatePersonPayload
  updateOrCreatePersonalData(input: UpdateOrCreatePersonalDataInput!): UpdateOrCreatePersonalDataPayload
  updateOrCreateRecipe(input: UpdateOrCreateRecipeInput!): UpdateOrCreateRecipePayload
  updateOrCreateServing(input: UpdateOrCreateServingInput!): UpdateOrCreateServingPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteAppSettings(input: DeleteAppSettingsInput!): DeleteAppSettingsPayload
  deleteDataPointFloat(input: DeleteDataPointFloatInput!): DeleteDataPointFloatPayload
  deleteDataPointInt(input: DeleteDataPointIntInput!): DeleteDataPointIntPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deleteFood(input: DeleteFoodInput!): DeleteFoodPayload
  deleteFoodItem(input: DeleteFoodItemInput!): DeleteFoodItemPayload
  deleteIngredient(input: DeleteIngredientInput!): DeleteIngredientPayload
  deleteKitchenUtensil(input: DeleteKitchenUtensilInput!): DeleteKitchenUtensilPayload
  deleteLimitationProfile(input: DeleteLimitationProfileInput!): DeleteLimitationProfilePayload
  deleteMeal(input: DeleteMealInput!): DeleteMealPayload
  deleteMealSettings(input: DeleteMealSettingsInput!): DeleteMealSettingsPayload
  deleteMicroTarget(input: DeleteMicroTargetInput!): DeleteMicroTargetPayload
  deleteMicroTargetsDay(input: DeleteMicroTargetsDayInput!): DeleteMicroTargetsDayPayload
  deleteMicroTargetsSettings(input: DeleteMicroTargetsSettingsInput!): DeleteMicroTargetsSettingsPayload
  deleteNutritionTargetsDay(input: DeleteNutritionTargetsDayInput!): DeleteNutritionTargetsDayPayload
  deleteNutritionTargetsSettings(input: DeleteNutritionTargetsSettingsInput!): DeleteNutritionTargetsSettingsPayload
  deleteNutritionValues(input: DeleteNutritionValuesInput!): DeleteNutritionValuesPayload
  deletePantryItem(input: DeletePantryItemInput!): DeletePantryItemPayload
  deletePerson(input: DeletePersonInput!): DeletePersonPayload
  deletePersonalData(input: DeletePersonalDataInput!): DeletePersonalDataPayload
  deleteRecipe(input: DeleteRecipeInput!): DeleteRecipePayload
  deleteServing(input: DeleteServingInput!): DeleteServingPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  setFoodRecipe(input: AddToFoodRecipeFoodInput!): SetFoodRecipePayload
  setIngredientNutritionValues(input: AddToIngredientNutritionValuesIngredientInput!): SetIngredientNutritionValuesPayload
  setKitchenUtensilImg(input: AddToKitchenUtensilImgKitchenUtensilInput!): SetKitchenUtensilImgPayload
  setPantryItemFoodItem(input: AddToPantryItemFoodItemPantryItemInput!): SetPantryItemFoodItemPayload
  setPersonMicroTargetsSettings(input: AddToPersonMicroTargetsSettingsPersonInput!): SetPersonMicroTargetsSettingsPayload
  setPersonNutritionTargetsSettings(input: AddToPersonNutritionTargetsSettingsPersonInput!): SetPersonNutritionTargetsSettingsPayload
  setPersonPersonalData(input: AddToPersonPersonalDataPersonInput!): SetPersonPersonalDataPayload
  setRecipeImg(input: AddToRecipeImgRecipeInput!): SetRecipeImgPayload
  setRecipeNutritionValues(input: AddToRecipeNutritionValuesRecipeInput!): SetRecipeNutritionValuesPayload
  setServingPerson(input: AddToServingPersonServingInput!): SetServingPersonPayload
  setUserAppSettings(input: AddToUserAppSettingsUserInput!): SetUserAppSettingsPayload
  unsetFoodRecipe(input: UnsetFoodRecipeFoodInput!): UnsetFoodRecipePayload
  unsetIngredientNutritionValues(input: UnsetIngredientNutritionValuesIngredientInput!): UnsetIngredientNutritionValuesPayload
  unsetKitchenUtensilImg(input: UnsetKitchenUtensilImgKitchenUtensilInput!): UnsetKitchenUtensilImgPayload
  unsetPantryItemFoodItem(input: UnsetPantryItemFoodItemPantryItemInput!): UnsetPantryItemFoodItemPayload
  unsetPersonMicroTargetsSettings(input: UnsetPersonMicroTargetsSettingsPersonInput!): UnsetPersonMicroTargetsSettingsPayload
  unsetPersonNutritionTargetsSettings(input: UnsetPersonNutritionTargetsSettingsPersonInput!): UnsetPersonNutritionTargetsSettingsPayload
  unsetPersonPersonalData(input: UnsetPersonPersonalDataPersonInput!): UnsetPersonPersonalDataPayload
  unsetRecipeImg(input: UnsetRecipeImgRecipeInput!): UnsetRecipeImgPayload
  unsetRecipeNutritionValues(input: UnsetRecipeNutritionValuesRecipeInput!): UnsetRecipeNutritionValuesPayload
  unsetServingPerson(input: UnsetServingPersonServingInput!): UnsetServingPersonPayload
  unsetUserAppSettings(input: UnsetUserAppSettingsUserInput!): UnsetUserAppSettingsPayload
  addToFoodItemIngredient(input: AddToFoodItemIngredientFoodItemInput!): AddToFoodItemIngredientPayload
  addToFoodLeftovers(input: AddToFoodLeftoversFoodInput!): AddToFoodLeftoversPayload
  addToFoodServings(input: AddToFoodServingsFoodInput!): AddToFoodServingsPayload
  addToMealFoods(input: AddToMealFoodsMealInput!): AddToMealFoodsPayload
  addToMealMealSettings(input: AddToMealMealSettingsMealInput!): AddToMealMealSettingsPayload
  addToMicroTargetDayMicroTargets(input: AddToMicroTargetDayMicroTargetsMicroTargetsDayInput!): AddToMicroTargetDayMicroTargetsPayload
  addToMicroTargetsSettingsMicroTargetsDay(input: AddToMicroTargetsSettingsMicroTargetsDayMicroTargetsSettingsInput!): AddToMicroTargetsSettingsMicroTargetsDayPayload
  addToNutritionTargetsSettingsNutritionTargetsDays(input: AddToNutritionTargetsSettingsNutritionTargetsDaysNutritionTargetsSettingsInput!): AddToNutritionTargetsSettingsNutritionTargetsDaysPayload
  addToPersonDislikedRecipes(input: AddToPersonDislikedRecipesPersonInput!): AddToPersonDislikedRecipesPayload
  addToPersonLikedRecipes(input: AddToPersonLikedRecipesPersonInput!): AddToPersonLikedRecipesPayload
  addToPersonLimitationProfile(input: AddToPersonLimitationProfilePersonInput!): AddToPersonLimitationProfilePayload
  addToPersonMealSettings(input: AddToPersonMealSettingsMealSettingsInput!): AddToPersonMealSettingsPayload
  addToRecipeIngredients(input: AddToRecipeIngredientsRecipeInput!): AddToRecipeIngredientsPayload
  addToUserIngredients(input: AddToUserIngredientsUserInput!): AddToUserIngredientsPayload
  addToUserLimitationProfiles(input: AddToUserLimitationProfilesUserInput!): AddToUserLimitationProfilesPayload
  addToUserMeals(input: AddToUserMealsUserInput!): AddToUserMealsPayload
  addToUserPantryItems(input: AddToUserPantryItemsUserInput!): AddToUserPantryItemsPayload
  addToUserPersons(input: AddToUserPersonsPersonInput!): AddToUserPersonsPayload
  addToUserRecipes(input: AddToUserRecipesRecipeInput!): AddToUserRecipesPayload
  removeFromFoodItemIngredient(input: RemoveFromFoodItemIngredientFoodItemInput!): RemoveFromFoodItemIngredientPayload
  removeFromFoodLeftovers(input: RemoveFromFoodLeftoversFoodInput!): RemoveFromFoodLeftoversPayload
  removeFromFoodServings(input: RemoveFromFoodServingsFoodInput!): RemoveFromFoodServingsPayload
  removeFromMealFoods(input: RemoveFromMealFoodsMealInput!): RemoveFromMealFoodsPayload
  removeFromMealMealSettings(input: RemoveFromMealMealSettingsMealInput!): RemoveFromMealMealSettingsPayload
  removeFromMicroTargetDayMicroTargets(input: RemoveFromMicroTargetDayMicroTargetsMicroTargetsDayInput!): RemoveFromMicroTargetDayMicroTargetsPayload
  removeFromMicroTargetsSettingsMicroTargetsDay(input: RemoveFromMicroTargetsSettingsMicroTargetsDayMicroTargetsSettingsInput!): RemoveFromMicroTargetsSettingsMicroTargetsDayPayload
  removeFromNutritionTargetsSettingsNutritionTargetsDays(input: RemoveFromNutritionTargetsSettingsNutritionTargetsDaysNutritionTargetsSettingsInput!): RemoveFromNutritionTargetsSettingsNutritionTargetsDaysPayload
  removeFromPersonDislikedRecipes(input: RemoveFromPersonDislikedRecipesPersonInput!): RemoveFromPersonDislikedRecipesPayload
  removeFromPersonLikedRecipes(input: RemoveFromPersonLikedRecipesPersonInput!): RemoveFromPersonLikedRecipesPayload
  removeFromPersonLimitationProfile(input: RemoveFromPersonLimitationProfilePersonInput!): RemoveFromPersonLimitationProfilePayload
  removeFromPersonMealSettings(input: RemoveFromPersonMealSettingsMealSettingsInput!): RemoveFromPersonMealSettingsPayload
  removeFromRecipeIngredients(input: RemoveFromRecipeIngredientsRecipeInput!): RemoveFromRecipeIngredientsPayload
  removeFromUserIngredients(input: RemoveFromUserIngredientsUserInput!): RemoveFromUserIngredientsPayload
  removeFromUserLimitationProfiles(input: RemoveFromUserLimitationProfilesUserInput!): RemoveFromUserLimitationProfilesPayload
  removeFromUserMeals(input: RemoveFromUserMealsUserInput!): RemoveFromUserMealsPayload
  removeFromUserPantryItems(input: RemoveFromUserPantryItemsUserInput!): RemoveFromUserPantryItemsPayload
  removeFromUserPersons(input: RemoveFromUserPersonsPersonInput!): RemoveFromUserPersonsPayload
  removeFromUserRecipes(input: RemoveFromUserRecipesRecipeInput!): RemoveFromUserRecipesPayload
  signinUser(input: SigninUserInput!): SigninPayload!
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

enum NUTRITION_TARGETS_DAY_DAY {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
  All
}

type NutritionTargetsDay implements Node {
  createdAt: DateTime!
  day: NUTRITION_TARGETS_DAY_DAY!
  id: ID!
  nutritionTargetsSettings(filter: NutritionTargetsSettingsFilter): NutritionTargetsSettings
  updatedAt: DateTime!
}

# A connection to a list of items.
type NutritionTargetsDayConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NutritionTargetsDayEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type NutritionTargetsDayEdge {
  # The item at the end of the edge.
  node: NutritionTargetsDay!

  # A cursor for use in pagination.
  cursor: String!
}

input NutritionTargetsDayFilter {
  # Logical AND on all given filters.
  AND: [NutritionTargetsDayFilter!]

  # Logical OR on all given filters.
  OR: [NutritionTargetsDayFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  day: NUTRITION_TARGETS_DAY_DAY

  # All values that are not equal to given value.
  day_not: NUTRITION_TARGETS_DAY_DAY

  # All values that are contained in given list.
  day_in: [NUTRITION_TARGETS_DAY_DAY!]

  # All values that are not contained in given list.
  day_not_in: [NUTRITION_TARGETS_DAY_DAY!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  nutritionTargetsSettings: NutritionTargetsSettingsFilter
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  person: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPerson
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings
  personalDataId: ID
  personalData: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonpersonalDataPersonalData
  servingId: ID
  serving: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonmealSettingsMealSettings!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonpersonalDataPersonalData {
  personId: ID
}

input NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

enum NutritionTargetsDayOrderBy {
  createdAt_ASC
  createdAt_DESC
  day_ASC
  day_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NutritionTargetsSettings implements Node {
  createdAt: DateTime!
  daily: Boolean!
  id: ID!
  nutritionTargetsDays(filter: NutritionTargetsDayFilter, orderBy: NutritionTargetsDayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NutritionTargetsDayConnection
  person(filter: PersonFilter): Person
  updatedAt: DateTime!
}

# A connection to a list of items.
type NutritionTargetsSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NutritionTargetsSettingsEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type NutritionTargetsSettingsEdge {
  # The item at the end of the edge.
  node: NutritionTargetsSettings!

  # A cursor for use in pagination.
  cursor: String!
}

input NutritionTargetsSettingsFilter {
  # Logical AND on all given filters.
  AND: [NutritionTargetsSettingsFilter!]

  # Logical OR on all given filters.
  OR: [NutritionTargetsSettingsFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  daily: Boolean

  # All values that are not equal to given value.
  daily_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  nutritionTargetsDays_every: NutritionTargetsDayFilter
  nutritionTargetsDays_some: NutritionTargetsDayFilter
  nutritionTargetsDays_none: NutritionTargetsDayFilter
  person: PersonFilter
}

input NutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
}

enum NutritionTargetsSettingsOrderBy {
  createdAt_ASC
  createdAt_DESC
  daily_ASC
  daily_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input NutritionTargetsSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: NutritionTargetsSettingspersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: NutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: NutritionTargetsSettingspersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [NutritionTargetsSettingspersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [NutritionTargetsSettingspersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [NutritionTargetsSettingspersonPersonmealSettingsMealSettings!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: NutritionTargetsSettingspersonPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: NutritionTargetsSettingspersonPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: NutritionTargetsSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [NutritionTargetsSettingspersonPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [NutritionTargetsSettingspersonPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [NutritionTargetsSettingspersonPersondislikedRecipesRecipelikedByPerson!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: NutritionTargetsSettingspersonPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: NutritionTargetsSettingspersonPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: NutritionTargetsSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [NutritionTargetsSettingspersonPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [NutritionTargetsSettingspersonPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [NutritionTargetsSettingspersonPersonlikedRecipesRecipelikedByPerson!]
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input NutritionTargetsSettingspersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [NutritionTargetsSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input NutritionTargetsSettingspersonPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: NutritionTargetsSettingspersonPersonmealSettingsMealSettingsmealMeal
}

input NutritionTargetsSettingspersonPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [NutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input NutritionTargetsSettingspersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input NutritionTargetsSettingspersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: NutritionTargetsSettingspersonPersonservingServingfoodFood
}

input NutritionTargetsSettingspersonPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

type NutritionValues implements Node {
  createdAt: DateTime!
  id: ID!
  ingredient(filter: IngredientFilter): Ingredient
  recipe(filter: RecipeFilter): Recipe
  updatedAt: DateTime!
}

# A connection to a list of items.
type NutritionValuesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [NutritionValuesEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type NutritionValuesEdge {
  # The item at the end of the edge.
  node: NutritionValues!

  # A cursor for use in pagination.
  cursor: String!
}

input NutritionValuesFilter {
  # Logical AND on all given filters.
  AND: [NutritionValuesFilter!]

  # Logical OR on all given filters.
  OR: [NutritionValuesFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  ingredient: IngredientFilter
  recipe: RecipeFilter
}

input NutritionValuesingredientIngredient {
  recipeId: ID
  recipe: NutritionValuesingredientIngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [NutritionValuesingredientIngredientfoodItemsFoodItem!]
}

input NutritionValuesingredientIngredientfoodItemsFoodItem {
  amount: Float
  pantryItemId: ID
  pantryItem: NutritionValuesingredientIngredientfoodItemsFoodItempantryItemPantryItem
}

input NutritionValuesingredientIngredientfoodItemsFoodItempantryItemPantryItem {
  foodItemId: ID
  userId: ID
}

input NutritionValuesingredientIngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: NutritionValuesingredientIngredientrecipeRecipefoodFood
  imgId: ID
  img: NutritionValuesingredientIngredientrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: NutritionValuesingredientIngredientrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [NutritionValuesingredientIngredientrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [NutritionValuesingredientIngredientrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [NutritionValuesingredientIngredientrecipeRecipelikedByPerson!]
}

input NutritionValuesingredientIngredientrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionValuesingredientIngredientrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input NutritionValuesingredientIngredientrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input NutritionValuesingredientIngredientrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input NutritionValuesingredientIngredientrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionValuesingredientIngredientrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

enum NutritionValuesOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input NutritionValuesrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: NutritionValuesrecipeRecipefoodFood
  imgId: ID
  img: NutritionValuesrecipeRecipeimgFile
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [NutritionValuesrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [NutritionValuesrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [NutritionValuesrecipeRecipelikedByPerson!]
}

input NutritionValuesrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: NutritionValuesrecipeRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: NutritionValuesrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionValuesrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: NutritionValuesrecipeRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: NutritionValuesrecipeRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [NutritionValuesrecipeRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [NutritionValuesrecipeRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [NutritionValuesrecipeRecipedislikedByPersonmealSettingsMealSettings!]
}

input NutritionValuesrecipeRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionValuesrecipeRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionValuesrecipeRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input NutritionValuesrecipeRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input NutritionValuesrecipeRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input NutritionValuesrecipeRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input NutritionValuesrecipeRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input NutritionValuesrecipeRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input NutritionValuesrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: NutritionValuesrecipeRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [NutritionValuesrecipeRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [NutritionValuesrecipeRecipefoodFoodservingsServing!]
}

input NutritionValuesrecipeRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input NutritionValuesrecipeRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input NutritionValuesrecipeRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input NutritionValuesrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: NutritionValuesrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input NutritionValuesrecipeRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input NutritionValuesrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: NutritionValuesrecipeRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [NutritionValuesrecipeRecipeingredientsIngredientfoodItemsFoodItem!]
}

input NutritionValuesrecipeRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input NutritionValuesrecipeRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input NutritionValuesrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: NutritionValuesrecipeRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: NutritionValuesrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionValuesrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: NutritionValuesrecipeRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: NutritionValuesrecipeRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [NutritionValuesrecipeRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [NutritionValuesrecipeRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [NutritionValuesrecipeRecipelikedByPersonmealSettingsMealSettings!]
}

input NutritionValuesrecipeRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionValuesrecipeRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input NutritionValuesrecipeRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input NutritionValuesrecipeRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input NutritionValuesrecipeRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input NutritionValuesrecipeRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input NutritionValuesrecipeRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input NutritionValuesrecipeRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type PantryItem implements Node {
  createdAt: DateTime!
  foodItem(filter: FoodItemFilter): FoodItem
  id: ID!
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

# A connection to a list of items.
type PantryItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PantryItemEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PantryItemEdge {
  # The item at the end of the edge.
  node: PantryItem!

  # A cursor for use in pagination.
  cursor: String!
}

input PantryItemFilter {
  # Logical AND on all given filters.
  AND: [PantryItemFilter!]

  # Logical OR on all given filters.
  OR: [PantryItemFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  foodItem: FoodItemFilter
  user: UserFilter
}

input PantryItemfoodItemFoodItem {
  amount: Float
  ingredientId: ID
  ingredient: PantryItemfoodItemFoodItemingredientIngredient
}

input PantryItemfoodItemFoodItemingredientIngredient {
  nutritionValuesId: ID
  nutritionValues: PantryItemfoodItemFoodItemingredientIngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: PantryItemfoodItemFoodItemingredientIngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [PantryItemfoodItemFoodItemingredientIngredientfoodItemsFoodItem!]
}

input PantryItemfoodItemFoodItemingredientIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input PantryItemfoodItemFoodItemingredientIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input PantryItemfoodItemFoodItemingredientIngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

enum PantryItemOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# A family member
type Person implements Node {
  createdAt: DateTime!
  dislikedRecipes(filter: RecipeFilter, orderBy: RecipeOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection
  family: Boolean!
  id: ID!
  likedRecipes(filter: RecipeFilter, orderBy: RecipeOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection
  limitationProfile(filter: LimitationProfileFilter): LimitationProfile
  mealSettings(filter: MealSettingsFilter, orderBy: MealSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MealSettingsConnection
  microTargetsSettings(filter: MicroTargetsSettingsFilter): MicroTargetsSettings
  name: String!
  nutritionTargetsSettings(filter: NutritionTargetsSettingsFilter): NutritionTargetsSettings
  personalData(filter: PersonalDataFilter): PersonalData
  serving(filter: ServingFilter): Serving
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

type PersonalData implements Node {
  createdAt: DateTime!
  id: ID!
  person(filter: PersonFilter): Person
  updatedAt: DateTime!
}

# A connection to a list of items.
type PersonalDataConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PersonalDataEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PersonalDataEdge {
  # The item at the end of the edge.
  node: PersonalData!

  # A cursor for use in pagination.
  cursor: String!
}

input PersonalDataFilter {
  # Logical AND on all given filters.
  AND: [PersonalDataFilter!]

  # Logical OR on all given filters.
  OR: [PersonalDataFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  person: PersonFilter
}

enum PersonalDataOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PersonalDatapersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersonalDatapersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonalDatapersonPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonalDatapersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  servingId: ID
  serving: PersonalDatapersonPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersonalDatapersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonalDatapersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonalDatapersonPersonmealSettingsMealSettings!]
}

input PersonalDatapersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: PersonalDatapersonPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: PersonalDatapersonPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: PersonalDatapersonPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [PersonalDatapersonPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [PersonalDatapersonPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [PersonalDatapersonPersondislikedRecipesRecipelikedByPerson!]
}

input PersonalDatapersonPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersonalDatapersonPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input PersonalDatapersonPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input PersonalDatapersonPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input PersonalDatapersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: PersonalDatapersonPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: PersonalDatapersonPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: PersonalDatapersonPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [PersonalDatapersonPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [PersonalDatapersonPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [PersonalDatapersonPersonlikedRecipesRecipelikedByPerson!]
}

input PersonalDatapersonPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersonalDatapersonPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input PersonalDatapersonPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input PersonalDatapersonPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input PersonalDatapersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [PersonalDatapersonPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input PersonalDatapersonPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: PersonalDatapersonPersonmealSettingsMealSettingsmealMeal
}

input PersonalDatapersonPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonalDatapersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [PersonalDatapersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input PersonalDatapersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input PersonalDatapersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [PersonalDatapersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input PersonalDatapersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input PersonalDatapersonPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: PersonalDatapersonPersonservingServingfoodFood
}

input PersonalDatapersonPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

# A connection to a list of items.
type PersonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PersonEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input PersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: PersondislikedRecipesRecipefoodFood
  imgId: ID
  img: PersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: PersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [PersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [PersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [PersondislikedRecipesRecipelikedByPerson!]
}

input PersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersondislikedRecipesRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersondislikedRecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersondislikedRecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: PersondislikedRecipesRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: PersondislikedRecipesRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersondislikedRecipesRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersondislikedRecipesRecipedislikedByPersonmealSettingsMealSettings!]
}

input PersondislikedRecipesRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersondislikedRecipesRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersondislikedRecipesRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input PersondislikedRecipesRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersondislikedRecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input PersondislikedRecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input PersondislikedRecipesRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input PersondislikedRecipesRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: PersondislikedRecipesRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [PersondislikedRecipesRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [PersondislikedRecipesRecipefoodFoodservingsServing!]
}

input PersondislikedRecipesRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersondislikedRecipesRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersondislikedRecipesRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: PersondislikedRecipesRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input PersondislikedRecipesRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input PersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: PersondislikedRecipesRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [PersondislikedRecipesRecipeingredientsIngredientfoodItemsFoodItem!]
}

input PersondislikedRecipesRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input PersondislikedRecipesRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input PersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersondislikedRecipesRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersondislikedRecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersondislikedRecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: PersondislikedRecipesRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: PersondislikedRecipesRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersondislikedRecipesRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersondislikedRecipesRecipelikedByPersonmealSettingsMealSettings!]
}

input PersondislikedRecipesRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersondislikedRecipesRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersondislikedRecipesRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input PersondislikedRecipesRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersondislikedRecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input PersondislikedRecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input PersondislikedRecipesRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input PersondislikedRecipesRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: PersondislikedRecipesRecipenutritionValuesNutritionValuesingredientIngredient
}

input PersondislikedRecipesRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

# An edge in a connection.
type PersonEdge {
  # The item at the end of the edge.
  node: Person!

  # A cursor for use in pagination.
  cursor: String!
}

input PersonFilter {
  # Logical AND on all given filters.
  AND: [PersonFilter!]

  # Logical OR on all given filters.
  OR: [PersonFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  family: Boolean

  # All values that are not equal to given value.
  family_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  dislikedRecipes_every: RecipeFilter
  dislikedRecipes_some: RecipeFilter
  dislikedRecipes_none: RecipeFilter
  likedRecipes_every: RecipeFilter
  likedRecipes_some: RecipeFilter
  likedRecipes_none: RecipeFilter
  limitationProfile: LimitationProfileFilter
  mealSettings_every: MealSettingsFilter
  mealSettings_some: MealSettingsFilter
  mealSettings_none: MealSettingsFilter
  microTargetsSettings: MicroTargetsSettingsFilter
  nutritionTargetsSettings: NutritionTargetsSettingsFilter
  personalData: PersonalDataFilter
  serving: ServingFilter
  user: UserFilter
}

input PersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: PersonlikedRecipesRecipefoodFood
  imgId: ID
  img: PersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: PersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [PersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [PersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [PersonlikedRecipesRecipelikedByPerson!]
}

input PersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersonlikedRecipesRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonlikedRecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonlikedRecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: PersonlikedRecipesRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: PersonlikedRecipesRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersonlikedRecipesRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonlikedRecipesRecipedislikedByPersonmealSettingsMealSettings!]
}

input PersonlikedRecipesRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlikedRecipesRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlikedRecipesRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input PersonlikedRecipesRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersonlikedRecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input PersonlikedRecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input PersonlikedRecipesRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input PersonlikedRecipesRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: PersonlikedRecipesRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [PersonlikedRecipesRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [PersonlikedRecipesRecipefoodFoodservingsServing!]
}

input PersonlikedRecipesRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersonlikedRecipesRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonlikedRecipesRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: PersonlikedRecipesRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input PersonlikedRecipesRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input PersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: PersonlikedRecipesRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [PersonlikedRecipesRecipeingredientsIngredientfoodItemsFoodItem!]
}

input PersonlikedRecipesRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input PersonlikedRecipesRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input PersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: PersonlikedRecipesRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonlikedRecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonlikedRecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: PersonlikedRecipesRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: PersonlikedRecipesRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersonlikedRecipesRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonlikedRecipesRecipelikedByPersonmealSettingsMealSettings!]
}

input PersonlikedRecipesRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlikedRecipesRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlikedRecipesRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input PersonlikedRecipesRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersonlikedRecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input PersonlikedRecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input PersonlikedRecipesRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input PersonlikedRecipesRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: PersonlikedRecipesRecipenutritionValuesNutritionValuesingredientIngredient
}

input PersonlikedRecipesRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input PersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [PersonlimitationProfileLimitationProfilepersonsPerson!]
}

input PersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  microTargetsSettingsId: ID
  microTargetsSettings: PersonlimitationProfileLimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonlimitationProfileLimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: PersonlimitationProfileLimitationProfilepersonsPersonpersonalDataPersonalData
  servingId: ID
  serving: PersonlimitationProfileLimitationProfilepersonsPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersonlimitationProfileLimitationProfilepersonsPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlimitationProfileLimitationProfilepersonsPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonlimitationProfileLimitationProfilepersonsPersonmealSettingsMealSettings!]
}

input PersonlimitationProfileLimitationProfilepersonsPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlimitationProfileLimitationProfilepersonsPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonlimitationProfileLimitationProfilepersonsPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersonlimitationProfileLimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input PersonlimitationProfileLimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input PersonlimitationProfileLimitationProfilepersonsPersonpersonalDataPersonalData {
  personId: ID
}

input PersonlimitationProfileLimitationProfilepersonsPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input PersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: PersonmealSettingsMealSettingsmealMeal
}

input PersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [PersonmealSettingsMealSettingsmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonmealSettingsMealSettingsmealMealmealSettingsMealSettings!]
}

input PersonmealSettingsMealSettingsmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersonmealSettingsMealSettingsmealMealmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input PersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [PersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input PersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsIds: [ID!]
  microTargets: [PersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget!]
}

input PersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDaymicroTargetsMicroTarget {
  max: Float
  min: Float
  name: String!
  unit: String!
  microTargetDayId: ID
}

input PersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [PersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input PersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
}

enum PersonOrderBy {
  createdAt_ASC
  createdAt_DESC
  family_ASC
  family_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: PersonservingServingfoodFood
}

input PersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: PersonservingServingfoodFoodmealMeal
  recipeId: ID
  recipe: PersonservingServingfoodFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [PersonservingServingfoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [PersonservingServingfoodFoodservingsServing!]
}

input PersonservingServingfoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input PersonservingServingfoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input PersonservingServingfoodFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input PersonservingServingfoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Recipe implements Node {
  createdAt: DateTime!
  dislikedBy(filter: PersonFilter, orderBy: PersonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection
  food(filter: FoodFilter): Food
  id: ID!
  img(filter: FileFilter): File
  ingredients(filter: IngredientFilter, orderBy: IngredientOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection
  likedBy(filter: PersonFilter, orderBy: PersonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  nutritionValues(filter: NutritionValuesFilter): NutritionValues
  public: Boolean!
  updatedAt: DateTime!
  user(filter: UserFilter): User
}

enum RECIPE_MEAL_CATEGORIES {
  Breakfast
  Fruit
  Vegetable
  Main
  Side
  Snack
  Dessert
  Drink
  Shake
  Bread
}

# A connection to a list of items.
type RecipeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RecipeEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input RecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: RecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: RecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: RecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: RecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [RecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [RecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [RecipedislikedByPersonmealSettingsMealSettings!]
}

input RecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipedislikedByPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: RecipedislikedByPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipedislikedByPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipedislikedByPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipedislikedByPersondislikedRecipesRecipelikedByPerson!]
}

input RecipedislikedByPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipedislikedByPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input RecipedislikedByPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input RecipedislikedByPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input RecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipedislikedByPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: RecipedislikedByPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipedislikedByPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipedislikedByPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipedislikedByPersonlikedRecipesRecipelikedByPerson!]
}

input RecipedislikedByPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipedislikedByPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input RecipedislikedByPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input RecipedislikedByPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input RecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [RecipedislikedByPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input RecipedislikedByPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: RecipedislikedByPersonmealSettingsMealSettingsmealMeal
}

input RecipedislikedByPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [RecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input RecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input RecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [RecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input RecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input RecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: RecipedislikedByPersonservingServingfoodFood
}

input RecipedislikedByPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

# An edge in a connection.
type RecipeEdge {
  # The item at the end of the edge.
  node: Recipe!

  # A cursor for use in pagination.
  cursor: String!
}

input RecipeFilter {
  # Logical AND on all given filters.
  AND: [RecipeFilter!]

  # Logical OR on all given filters.
  OR: [RecipeFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  public: Boolean

  # All values that are not equal to given value.
  public_not: Boolean
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  dislikedBy_every: PersonFilter
  dislikedBy_some: PersonFilter
  dislikedBy_none: PersonFilter
  food: FoodFilter
  img: FileFilter
  ingredients_every: IngredientFilter
  ingredients_some: IngredientFilter
  ingredients_none: IngredientFilter
  likedBy_every: PersonFilter
  likedBy_some: PersonFilter
  likedBy_none: PersonFilter
  nutritionValues: NutritionValuesFilter
  user: UserFilter
}

input RecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: RecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [RecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [RecipefoodFoodservingsServing!]
}

input RecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: RecipefoodFoodleftoversFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [RecipefoodFoodleftoversFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [RecipefoodFoodleftoversFoodservingsServing!]
}

input RecipefoodFoodleftoversFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipefoodFoodleftoversFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipefoodFoodleftoversFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input RecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [RecipefoodFoodmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [RecipefoodFoodmealMealmealSettingsMealSettings!]
}

input RecipefoodFoodmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipefoodFoodmealMealmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input RecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  personId: ID
  person: RecipefoodFoodservingsServingpersonPerson
}

input RecipefoodFoodservingsServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: RecipeimgFilekitchenUtensilImgKitchenUtensil
}

input RecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
}

input RecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: RecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [RecipeingredientsIngredientfoodItemsFoodItem!]
}

input RecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  pantryItemId: ID
  pantryItem: RecipeingredientsIngredientfoodItemsFoodItempantryItemPantryItem
}

input RecipeingredientsIngredientfoodItemsFoodItempantryItemPantryItem {
  foodItemId: ID
  userId: ID
}

input RecipeingredientsIngredientnutritionValuesNutritionValues {
  recipeId: ID
  recipe: RecipeingredientsIngredientnutritionValuesNutritionValuesrecipeRecipe
}

input RecipeingredientsIngredientnutritionValuesNutritionValuesrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input RecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: RecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: RecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: RecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: RecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [RecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [RecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [RecipelikedByPersonmealSettingsMealSettings!]
}

input RecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipelikedByPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: RecipelikedByPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipelikedByPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipelikedByPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipelikedByPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPersondislikedRecipesRecipelikedByPerson!]
}

input RecipelikedByPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipelikedByPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input RecipelikedByPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input RecipelikedByPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input RecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipelikedByPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: RecipelikedByPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipelikedByPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipelikedByPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipelikedByPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPersonlikedRecipesRecipelikedByPerson!]
}

input RecipelikedByPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipelikedByPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input RecipelikedByPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input RecipelikedByPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input RecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [RecipelikedByPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input RecipelikedByPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: RecipelikedByPersonmealSettingsMealSettingsmealMeal
}

input RecipelikedByPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input RecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [RecipelikedByPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input RecipelikedByPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input RecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [RecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input RecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input RecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: RecipelikedByPersonservingServingfoodFood
}

input RecipelikedByPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input RecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: RecipenutritionValuesNutritionValuesingredientIngredient
}

input RecipenutritionValuesNutritionValuesingredientIngredient {
  recipeId: ID
  recipe: RecipenutritionValuesNutritionValuesingredientIngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [RecipenutritionValuesNutritionValuesingredientIngredientfoodItemsFoodItem!]
}

input RecipenutritionValuesNutritionValuesingredientIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input RecipenutritionValuesNutritionValuesingredientIngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

enum RecipeOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  public_ASC
  public_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input RemoveFromFoodItemIngredientFoodItemInput {
  ingredientIngredientId: ID!
  foodItemsFoodItemId: ID!
  clientMutationId: String!
}

type RemoveFromFoodItemIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItemsFoodItem: FoodItem
  ingredientIngredient: Ingredient
  foodItemsFoodItemEdge: FoodItemEdge
  ingredientIngredientEdge: IngredientEdge
}

input RemoveFromFoodLeftoversFoodInput {
  leftovers1FoodId: ID!
  leftovers2FoodId: ID!
  clientMutationId: String!
}

type RemoveFromFoodLeftoversPayload {
  viewer: Viewer!
  clientMutationId: String!
  leftovers2Food: Food
  leftovers1Food: Food
  leftovers2FoodEdge: FoodEdge
  leftovers1FoodEdge: FoodEdge
}

input RemoveFromFoodServingsFoodInput {
  servingsServingId: ID!
  foodFoodId: ID!
  clientMutationId: String!
}

type RemoveFromFoodServingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodFood: Food
  servingsServing: Serving
  foodFoodEdge: FoodEdge
  servingsServingEdge: ServingEdge
}

input RemoveFromMealFoodsMealInput {
  foodsFoodId: ID!
  mealMealId: ID!
  clientMutationId: String!
}

type RemoveFromMealFoodsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealMeal: Meal
  foodsFood: Food
  mealMealEdge: MealEdge
  foodsFoodEdge: FoodEdge
}

input RemoveFromMealMealSettingsMealInput {
  mealSettingsMealSettingsId: ID!
  mealMealId: ID!
  clientMutationId: String!
}

type RemoveFromMealMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealMeal: Meal
  mealSettingsMealSettings: MealSettings
  mealMealEdge: MealEdge
  mealSettingsMealSettingsEdge: MealSettingsEdge
}

input RemoveFromMicroTargetDayMicroTargetsMicroTargetsDayInput {
  microTargetsMicroTargetId: ID!
  microTargetDayMicroTargetsDayId: ID!
  clientMutationId: String!
}

type RemoveFromMicroTargetDayMicroTargetsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetDayMicroTargetsDay: MicroTargetsDay
  microTargetsMicroTarget: MicroTarget
  microTargetDayMicroTargetsDayEdge: MicroTargetsDayEdge
  microTargetsMicroTargetEdge: MicroTargetEdge
}

input RemoveFromMicroTargetsSettingsMicroTargetsDayMicroTargetsSettingsInput {
  microTargetsDaysMicroTargetsDayId: ID!
  microTargetsSettingsMicroTargetsSettingsId: ID!
  clientMutationId: String!
}

type RemoveFromMicroTargetsSettingsMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettingsMicroTargetsSettings: MicroTargetsSettings
  microTargetsDaysMicroTargetsDay: MicroTargetsDay
  microTargetsSettingsMicroTargetsSettingsEdge: MicroTargetsSettingsEdge
  microTargetsDaysMicroTargetsDayEdge: MicroTargetsDayEdge
}

input RemoveFromNutritionTargetsSettingsNutritionTargetsDaysNutritionTargetsSettingsInput {
  nutritionTargetsDaysNutritionTargetsDayId: ID!
  nutritionTargetsSettingsNutritionTargetsSettingsId: ID!
  clientMutationId: String!
}

type RemoveFromNutritionTargetsSettingsNutritionTargetsDaysPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettingsNutritionTargetsSettings: NutritionTargetsSettings
  nutritionTargetsDaysNutritionTargetsDay: NutritionTargetsDay
  nutritionTargetsSettingsNutritionTargetsSettingsEdge: NutritionTargetsSettingsEdge
  nutritionTargetsDaysNutritionTargetsDayEdge: NutritionTargetsDayEdge
}

type RemoveFromPersonDislikedRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  dislikedByPerson: Person
  dislikedRecipesRecipe: Recipe
  dislikedByPersonEdge: PersonEdge
  dislikedRecipesRecipeEdge: RecipeEdge
}

input RemoveFromPersonDislikedRecipesPersonInput {
  dislikedRecipesRecipeId: ID!
  dislikedByPersonId: ID!
  clientMutationId: String!
}

type RemoveFromPersonLikedRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  likedByPerson: Person
  likedRecipesRecipe: Recipe
  likedByPersonEdge: PersonEdge
  likedRecipesRecipeEdge: RecipeEdge
}

input RemoveFromPersonLikedRecipesPersonInput {
  likedRecipesRecipeId: ID!
  likedByPersonId: ID!
  clientMutationId: String!
}

type RemoveFromPersonLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  personsPerson: Person
  limitationProfileLimitationProfile: LimitationProfile
  personsPersonEdge: PersonEdge
  limitationProfileLimitationProfileEdge: LimitationProfileEdge
}

input RemoveFromPersonLimitationProfilePersonInput {
  limitationProfileLimitationProfileId: ID!
  personsPersonId: ID!
  clientMutationId: String!
}

input RemoveFromPersonMealSettingsMealSettingsInput {
  personPersonId: ID!
  mealSettingsMealSettingsId: ID!
  clientMutationId: String!
}

type RemoveFromPersonMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettingsMealSettings: MealSettings
  personPerson: Person
  mealSettingsMealSettingsEdge: MealSettingsEdge
  personPersonEdge: PersonEdge
}

type RemoveFromRecipeIngredientsPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeRecipe: Recipe
  ingredientsIngredient: Ingredient
  recipeRecipeEdge: RecipeEdge
  ingredientsIngredientEdge: IngredientEdge
}

input RemoveFromRecipeIngredientsRecipeInput {
  ingredientsIngredientId: ID!
  recipeRecipeId: ID!
  clientMutationId: String!
}

type RemoveFromUserIngredientsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  userIngredientsIngredient: Ingredient
  userUserEdge: UserEdge
  userIngredientsIngredientEdge: IngredientEdge
}

input RemoveFromUserIngredientsUserInput {
  userIngredientsIngredientId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserLimitationProfilesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  limitationProfilesLimitationProfile: LimitationProfile
  userUserEdge: UserEdge
  limitationProfilesLimitationProfileEdge: LimitationProfileEdge
}

input RemoveFromUserLimitationProfilesUserInput {
  limitationProfilesLimitationProfileId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserMealsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  mealsMeal: Meal
  userUserEdge: UserEdge
  mealsMealEdge: MealEdge
}

input RemoveFromUserMealsUserInput {
  mealsMealId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserPantryItemsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  pantryItemsPantryItem: PantryItem
  userUserEdge: UserEdge
  pantryItemsPantryItemEdge: PantryItemEdge
}

input RemoveFromUserPantryItemsUserInput {
  pantryItemsPantryItemId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserPersonsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personsPerson: Person
  userUser: User
  personsPersonEdge: PersonEdge
  userUserEdge: UserEdge
}

input RemoveFromUserPersonsPersonInput {
  userUserId: ID!
  personsPersonId: ID!
  clientMutationId: String!
}

type RemoveFromUserRecipesPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipesRecipe: Recipe
  userUser: User
  recipesRecipeEdge: RecipeEdge
  userUserEdge: UserEdge
}

input RemoveFromUserRecipesRecipeInput {
  userUserId: ID!
  recipesRecipeId: ID!
  clientMutationId: String!
}

type Serving implements Node {
  createdAt: DateTime!
  food(filter: FoodFilter): Food
  guest: Boolean!
  id: ID!
  person(filter: PersonFilter): Person
  size: Float!
  updatedAt: DateTime!
}

# A connection to a list of items.
type ServingConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ServingEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ServingEdge {
  # The item at the end of the edge.
  node: Serving!

  # A cursor for use in pagination.
  cursor: String!
}

input ServingFilter {
  # Logical AND on all given filters.
  AND: [ServingFilter!]

  # Logical OR on all given filters.
  OR: [ServingFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  guest: Boolean

  # All values that are not equal to given value.
  guest_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  size: Float

  # All values that are not equal to given value.
  size_not: Float

  # All values that are contained in given list.
  size_in: [Float!]

  # All values that are not contained in given list.
  size_not_in: [Float!]

  # All values less than the given value.
  size_lt: Float

  # All values less than or equal the given value.
  size_lte: Float

  # All values greater than the given value.
  size_gt: Float

  # All values greater than or equal the given value.
  size_gte: Float
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  food: FoodFilter
  person: PersonFilter
}

input ServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: ServingfoodFoodmealMeal
  recipeId: ID
  recipe: ServingfoodFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [ServingfoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [ServingfoodFoodservingsServing!]
}

input ServingfoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: ServingfoodFoodleftoversFoodmealMeal
  recipeId: ID
  recipe: ServingfoodFoodleftoversFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [ServingfoodFoodleftoversFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [ServingfoodFoodleftoversFoodservingsServing!]
}

input ServingfoodFoodleftoversFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input ServingfoodFoodleftoversFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingfoodFoodleftoversFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input ServingfoodFoodleftoversFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input ServingfoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [ServingfoodFoodmealMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [ServingfoodFoodmealMealmealSettingsMealSettings!]
}

input ServingfoodFoodmealMealfoodsFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input ServingfoodFoodmealMealmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input ServingfoodFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  imgId: ID
  img: ServingfoodFoodrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: ServingfoodFoodrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [ServingfoodFoodrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [ServingfoodFoodrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [ServingfoodFoodrecipeRecipelikedByPerson!]
}

input ServingfoodFoodrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingfoodFoodrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input ServingfoodFoodrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input ServingfoodFoodrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingfoodFoodrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input ServingfoodFoodservingsServing {
  guest: Boolean
  size: Float
  personId: ID
  person: ServingfoodFoodservingsServingpersonPerson
}

input ServingfoodFoodservingsServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum ServingOrderBy {
  createdAt_ASC
  createdAt_DESC
  guest_ASC
  guest_DESC
  id_ASC
  id_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ServingpersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: ServingpersonPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: ServingpersonPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: ServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [ServingpersonPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [ServingpersonPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [ServingpersonPersonmealSettingsMealSettings!]
}

input ServingpersonPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: ServingpersonPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: ServingpersonPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: ServingpersonPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [ServingpersonPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [ServingpersonPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [ServingpersonPersondislikedRecipesRecipelikedByPerson!]
}

input ServingpersonPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input ServingpersonPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input ServingpersonPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input ServingpersonPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input ServingpersonPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: ServingpersonPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: ServingpersonPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: ServingpersonPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [ServingpersonPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [ServingpersonPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [ServingpersonPersonlikedRecipesRecipelikedByPerson!]
}

input ServingpersonPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input ServingpersonPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input ServingpersonPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input ServingpersonPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input ServingpersonPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [ServingpersonPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input ServingpersonPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: ServingpersonPersonmealSettingsMealSettingsmealMeal
}

input ServingpersonPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input ServingpersonPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [ServingpersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input ServingpersonPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input ServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [ServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input ServingpersonPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

type SetFoodRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  foodFood: Food
  recipeRecipe: Recipe
  foodFoodEdge: FoodEdge
  recipeRecipeEdge: RecipeEdge
}

type SetIngredientNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredientIngredient: Ingredient
  nutritionValuesNutritionValues: NutritionValues
  ingredientIngredientEdge: IngredientEdge
  nutritionValuesNutritionValuesEdge: NutritionValuesEdge
}

type SetKitchenUtensilImgPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensilImgKitchenUtensil: KitchenUtensil
  imgFile: File
  kitchenUtensilImgKitchenUtensilEdge: KitchenUtensilEdge
  imgFileEdge: FileEdge
}

type SetPantryItemFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItemPantryItem: PantryItem
  foodItemFoodItem: FoodItem
  pantryItemPantryItemEdge: PantryItemEdge
  foodItemFoodItemEdge: FoodItemEdge
}

type SetPersonMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  microTargetsSettingsMicroTargetsSettings: MicroTargetsSettings
  personPersonEdge: PersonEdge
  microTargetsSettingsMicroTargetsSettingsEdge: MicroTargetsSettingsEdge
}

type SetPersonNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  nutritionTargetsSettingsNutritionTargetsSettings: NutritionTargetsSettings
  personPersonEdge: PersonEdge
  nutritionTargetsSettingsNutritionTargetsSettingsEdge: NutritionTargetsSettingsEdge
}

type SetPersonPersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  personalDataPersonalData: PersonalData
  personPersonEdge: PersonEdge
  personalDataPersonalDataEdge: PersonalDataEdge
}

type SetRecipeImgPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeImgRecipe: Recipe
  imgFile: File
  recipeImgRecipeEdge: RecipeEdge
  imgFileEdge: FileEdge
}

type SetRecipeNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeRecipe: Recipe
  nutritionValuesNutritionValues: NutritionValues
  recipeRecipeEdge: RecipeEdge
  nutritionValuesNutritionValuesEdge: NutritionValuesEdge
}

type SetServingPersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  servingServing: Serving
  personPerson: Person
  servingServingEdge: ServingEdge
  personPersonEdge: PersonEdge
}

type SetUserAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  appSettingsAppSettings: AppSettings
  userUserEdge: UserEdge
  appSettingsAppSettingsEdge: AppSettingsEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type SigninPayload {
  token: String
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input SigninUserInput {
  email: AUTH_PROVIDER_EMAIL
  clientMutationId: String!
}

input SignupUserInput {
  kitchenUtensils: [USER_KITCHEN_UTENSILS!]
  publicName: String
  appSettingsId: ID
  limitationProfilesIds: [ID!]
  limitationProfiles: [UserlimitationProfilesLimitationProfile!]
  mealsIds: [ID!]
  meals: [UsermealsMeal!]
  pantryItemsIds: [ID!]
  pantryItems: [UserpantryItemsPantryItem!]
  personsIds: [ID!]
  persons: [UserpersonsPerson!]
  recipesIds: [ID!]
  recipes: [UserrecipesRecipe!]
  userIngredientsIds: [ID!]
  userIngredients: [UseruserIngredientsIngredient!]
  clientMutationId: String!
  authProvider: AuthProviderSignupData!
}

input UnsetFoodRecipeFoodInput {
  recipeRecipeId: ID!
  foodFoodId: ID!
  clientMutationId: String!
}

type UnsetFoodRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  foodFood: Food
  recipeRecipe: Recipe
  foodFoodEdge: FoodEdge
  recipeRecipeEdge: RecipeEdge
}

input UnsetIngredientNutritionValuesIngredientInput {
  nutritionValuesNutritionValuesId: ID!
  ingredientIngredientId: ID!
  clientMutationId: String!
}

type UnsetIngredientNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredientIngredient: Ingredient
  nutritionValuesNutritionValues: NutritionValues
  ingredientIngredientEdge: IngredientEdge
  nutritionValuesNutritionValuesEdge: NutritionValuesEdge
}

input UnsetKitchenUtensilImgKitchenUtensilInput {
  imgFileId: ID!
  kitchenUtensilImgKitchenUtensilId: ID!
  clientMutationId: String!
}

type UnsetKitchenUtensilImgPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensilImgKitchenUtensil: KitchenUtensil
  imgFile: File
  kitchenUtensilImgKitchenUtensilEdge: KitchenUtensilEdge
  imgFileEdge: FileEdge
}

input UnsetPantryItemFoodItemPantryItemInput {
  foodItemFoodItemId: ID!
  pantryItemPantryItemId: ID!
  clientMutationId: String!
}

type UnsetPantryItemFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItemPantryItem: PantryItem
  foodItemFoodItem: FoodItem
  pantryItemPantryItemEdge: PantryItemEdge
  foodItemFoodItemEdge: FoodItemEdge
}

type UnsetPersonMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  microTargetsSettingsMicroTargetsSettings: MicroTargetsSettings
  personPersonEdge: PersonEdge
  microTargetsSettingsMicroTargetsSettingsEdge: MicroTargetsSettingsEdge
}

input UnsetPersonMicroTargetsSettingsPersonInput {
  microTargetsSettingsMicroTargetsSettingsId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

type UnsetPersonNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  nutritionTargetsSettingsNutritionTargetsSettings: NutritionTargetsSettings
  personPersonEdge: PersonEdge
  nutritionTargetsSettingsNutritionTargetsSettingsEdge: NutritionTargetsSettingsEdge
}

input UnsetPersonNutritionTargetsSettingsPersonInput {
  nutritionTargetsSettingsNutritionTargetsSettingsId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

type UnsetPersonPersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personPerson: Person
  personalDataPersonalData: PersonalData
  personPersonEdge: PersonEdge
  personalDataPersonalDataEdge: PersonalDataEdge
}

input UnsetPersonPersonalDataPersonInput {
  personalDataPersonalDataId: ID!
  personPersonId: ID!
  clientMutationId: String!
}

type UnsetRecipeImgPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeImgRecipe: Recipe
  imgFile: File
  recipeImgRecipeEdge: RecipeEdge
  imgFileEdge: FileEdge
}

input UnsetRecipeImgRecipeInput {
  imgFileId: ID!
  recipeImgRecipeId: ID!
  clientMutationId: String!
}

type UnsetRecipeNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipeRecipe: Recipe
  nutritionValuesNutritionValues: NutritionValues
  recipeRecipeEdge: RecipeEdge
  nutritionValuesNutritionValuesEdge: NutritionValuesEdge
}

input UnsetRecipeNutritionValuesRecipeInput {
  nutritionValuesNutritionValuesId: ID!
  recipeRecipeId: ID!
  clientMutationId: String!
}

type UnsetServingPersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  servingServing: Serving
  personPerson: Person
  servingServingEdge: ServingEdge
  personPersonEdge: PersonEdge
}

input UnsetServingPersonServingInput {
  personPersonId: ID!
  servingServingId: ID!
  clientMutationId: String!
}

type UnsetUserAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  appSettingsAppSettings: AppSettings
  userUserEdge: UserEdge
  appSettingsAppSettingsEdge: AppSettingsEdge
}

input UnsetUserAppSettingsUserInput {
  appSettingsAppSettingsId: ID!
  userUserId: ID!
  clientMutationId: String!
}

input UpdateAppSettings {
  id: ID!
  userId: ID
}

input UpdateAppSettingsInput {
  id: ID!
  userId: ID
  clientMutationId: String!
}

type UpdateAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  appSettings: AppSettings
  edge: AppSettingsEdge
  user: User
}

input UpdateDataPointFloat {
  date: DateTime
  id: ID!
  value: Float
}

input UpdateDataPointFloatInput {
  date: DateTime
  id: ID!
  value: Float
  clientMutationId: String!
}

type UpdateDataPointFloatPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointFloat: DataPointFloat
  edge: DataPointFloatEdge
}

input UpdateDataPointInt {
  date: DateTime
  id: ID!
  value: Int
}

input UpdateDataPointIntInput {
  date: DateTime
  id: ID!
  value: Int
  clientMutationId: String!
}

type UpdateDataPointIntPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointInt: DataPointInt
  edge: DataPointIntEdge
}

input UpdateFile {
  id: ID!
  name: String
  kitchenUtensilImgId: ID
  kitchenUtensilImg: FilekitchenUtensilImgKitchenUtensil
  recipeImgId: ID
  recipeImg: FilerecipeImgRecipe
}

input UpdateFileInput {
  id: ID!
  name: String
  kitchenUtensilImgId: ID
  kitchenUtensilImg: FilekitchenUtensilImgKitchenUtensil
  recipeImgId: ID
  recipeImg: FilerecipeImgRecipe
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  kitchenUtensilImg: KitchenUtensil
  recipeImg: Recipe
}

input UpdateFood {
  eaten: Boolean
  id: ID!
  pos: Int
  mealId: ID
  meal: FoodmealMeal
  recipeId: ID
  recipe: FoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodservingsServing!]
}

input UpdateFoodInput {
  eaten: Boolean
  id: ID!
  pos: Int
  mealId: ID
  meal: FoodmealMeal
  recipeId: ID
  recipe: FoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [FoodleftoversFood!]
  servingsIds: [ID!]
  servings: [FoodservingsServing!]
  clientMutationId: String!
}

input UpdateFoodItem {
  amount: Float
  id: ID!
  ingredientId: ID
  ingredient: FoodItemingredientIngredient
  pantryItemId: ID
  pantryItem: FoodItempantryItemPantryItem
}

input UpdateFoodItemInput {
  amount: Float
  id: ID!
  ingredientId: ID
  ingredient: FoodItemingredientIngredient
  pantryItemId: ID
  pantryItem: FoodItempantryItemPantryItem
  clientMutationId: String!
}

type UpdateFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItem: FoodItem
  edge: FoodItemEdge
  ingredient: Ingredient
  pantryItem: PantryItem
}

type UpdateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  meal: Meal
  recipe: Recipe
}

input UpdateIngredient {
  id: ID!
  nutritionValuesId: ID
  nutritionValues: IngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: IngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [IngredientfoodItemsFoodItem!]
}

input UpdateIngredientInput {
  id: ID!
  nutritionValuesId: ID
  nutritionValues: IngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: IngredientrecipeRecipe
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [IngredientfoodItemsFoodItem!]
  clientMutationId: String!
}

type UpdateIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredient: Ingredient
  edge: IngredientEdge
  nutritionValues: NutritionValues
  recipe: Recipe
  user: User
}

input UpdateKitchenUtensil {
  id: ID!
  type: KITCHEN_UTENSIL_TYPE
  imgId: ID
  img: KitchenUtensilimgFile
}

input UpdateKitchenUtensilInput {
  id: ID!
  type: KITCHEN_UTENSIL_TYPE
  imgId: ID
  img: KitchenUtensilimgFile
  clientMutationId: String!
}

type UpdateKitchenUtensilPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensil: KitchenUtensil
  edge: KitchenUtensilEdge
  img: File
}

input UpdateLimitationProfile {
  id: ID!
  name: String
  userId: ID
  personsIds: [ID!]
  persons: [LimitationProfilepersonsPerson!]
}

input UpdateLimitationProfileInput {
  id: ID!
  name: String
  userId: ID
  personsIds: [ID!]
  persons: [LimitationProfilepersonsPerson!]
  clientMutationId: String!
}

type UpdateLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  limitationProfile: LimitationProfile
  edge: LimitationProfileEdge
  user: User
}

input UpdateMeal {
  date: DateTime
  id: ID!
  name: String
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [MealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [MealmealSettingsMealSettings!]
}

input UpdateMealInput {
  date: DateTime
  id: ID!
  name: String
  order: Int
  userId: ID
  foodsIds: [ID!]
  foods: [MealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [MealmealSettingsMealSettings!]
  clientMutationId: String!
}

type UpdateMealPayload {
  viewer: Viewer!
  clientMutationId: String!
  meal: Meal
  edge: MealEdge
  user: User
}

input UpdateMealSettings {
  default: Boolean
  id: ID!
  mealId: ID
  meal: MealSettingsmealMeal
  personId: ID
  person: MealSettingspersonPerson
}

input UpdateMealSettingsInput {
  default: Boolean
  id: ID!
  mealId: ID
  meal: MealSettingsmealMeal
  personId: ID
  person: MealSettingspersonPerson
  clientMutationId: String!
}

type UpdateMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettings: MealSettings
  edge: MealSettingsEdge
  meal: Meal
  person: Person
}

input UpdateMicroTarget {
  id: ID!
  max: Float
  min: Float
  name: String
  unit: String
  microTargetDayId: ID
  microTargetDay: MicroTargetmicroTargetDayMicroTargetsDay
}

input UpdateMicroTargetInput {
  id: ID!
  max: Float
  min: Float
  name: String
  unit: String
  microTargetDayId: ID
  microTargetDay: MicroTargetmicroTargetDayMicroTargetsDay
  clientMutationId: String!
}

type UpdateMicroTargetPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTarget: MicroTarget
  edge: MicroTargetEdge
  microTargetDay: MicroTargetsDay
}

input UpdateMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY
  id: ID!
  microTargetsSettingsId: ID
  microTargetsSettings: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettings
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsDaymicroTargetsMicroTarget!]
}

input UpdateMicroTargetsDayInput {
  day: MICRO_TARGETS_DAY_DAY
  id: ID!
  microTargetsSettingsId: ID
  microTargetsSettings: MicroTargetsDaymicroTargetsSettingsMicroTargetsSettings
  microTargetsIds: [ID!]
  microTargets: [MicroTargetsDaymicroTargetsMicroTarget!]
  clientMutationId: String!
}

type UpdateMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsDay: MicroTargetsDay
  edge: MicroTargetsDayEdge
  microTargetsSettings: MicroTargetsSettings
}

input UpdateMicroTargetsSettings {
  daily: Boolean
  id: ID!
  personId: ID
  person: MicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input UpdateMicroTargetsSettingsInput {
  daily: Boolean
  id: ID!
  personId: ID
  person: MicroTargetsSettingspersonPerson
  microTargetsDaysIds: [ID!]
  microTargetsDays: [MicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
  clientMutationId: String!
}

type UpdateMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettings: MicroTargetsSettings
  edge: MicroTargetsSettingsEdge
  person: Person
}

input UpdateNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY
  id: ID!
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettings
}

input UpdateNutritionTargetsDayInput {
  day: NUTRITION_TARGETS_DAY_DAY
  id: ID!
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: NutritionTargetsDaynutritionTargetsSettingsNutritionTargetsSettings
  clientMutationId: String!
}

type UpdateNutritionTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsDay: NutritionTargetsDay
  edge: NutritionTargetsDayEdge
  nutritionTargetsSettings: NutritionTargetsSettings
}

input UpdateNutritionTargetsSettings {
  daily: Boolean
  id: ID!
  personId: ID
  person: NutritionTargetsSettingspersonPerson
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [NutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input UpdateNutritionTargetsSettingsInput {
  daily: Boolean
  id: ID!
  personId: ID
  person: NutritionTargetsSettingspersonPerson
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [NutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
  clientMutationId: String!
}

type UpdateNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettings: NutritionTargetsSettings
  edge: NutritionTargetsSettingsEdge
  person: Person
}

input UpdateNutritionValues {
  id: ID!
  ingredientId: ID
  ingredient: NutritionValuesingredientIngredient
  recipeId: ID
  recipe: NutritionValuesrecipeRecipe
}

input UpdateNutritionValuesInput {
  id: ID!
  ingredientId: ID
  ingredient: NutritionValuesingredientIngredient
  recipeId: ID
  recipe: NutritionValuesrecipeRecipe
  clientMutationId: String!
}

type UpdateNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionValues: NutritionValues
  edge: NutritionValuesEdge
  ingredient: Ingredient
  recipe: Recipe
}

input UpdateOrCreateAppSettingsInput {
  update: UpdateAppSettings!
  create: CreateAppSettings!
  clientMutationId: String!
}

type UpdateOrCreateAppSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  appSettings: AppSettings
  edge: AppSettingsEdge
  user: User
}

input UpdateOrCreateDataPointFloatInput {
  update: UpdateDataPointFloat!
  create: CreateDataPointFloat!
  clientMutationId: String!
}

type UpdateOrCreateDataPointFloatPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointFloat: DataPointFloat
  edge: DataPointFloatEdge
}

input UpdateOrCreateDataPointIntInput {
  update: UpdateDataPointInt!
  create: CreateDataPointInt!
  clientMutationId: String!
}

type UpdateOrCreateDataPointIntPayload {
  viewer: Viewer!
  clientMutationId: String!
  dataPointInt: DataPointInt
  edge: DataPointIntEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  kitchenUtensilImg: KitchenUtensil
  recipeImg: Recipe
}

input UpdateOrCreateFoodInput {
  update: UpdateFood!
  create: CreateFood!
  clientMutationId: String!
}

input UpdateOrCreateFoodItemInput {
  update: UpdateFoodItem!
  create: CreateFoodItem!
  clientMutationId: String!
}

type UpdateOrCreateFoodItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  foodItem: FoodItem
  edge: FoodItemEdge
  ingredient: Ingredient
  pantryItem: PantryItem
}

type UpdateOrCreateFoodPayload {
  viewer: Viewer!
  clientMutationId: String!
  food: Food
  edge: FoodEdge
  meal: Meal
  recipe: Recipe
}

input UpdateOrCreateIngredientInput {
  update: UpdateIngredient!
  create: CreateIngredient!
  clientMutationId: String!
}

type UpdateOrCreateIngredientPayload {
  viewer: Viewer!
  clientMutationId: String!
  ingredient: Ingredient
  edge: IngredientEdge
  nutritionValues: NutritionValues
  recipe: Recipe
  user: User
}

input UpdateOrCreateKitchenUtensilInput {
  update: UpdateKitchenUtensil!
  create: CreateKitchenUtensil!
  clientMutationId: String!
}

type UpdateOrCreateKitchenUtensilPayload {
  viewer: Viewer!
  clientMutationId: String!
  kitchenUtensil: KitchenUtensil
  edge: KitchenUtensilEdge
  img: File
}

input UpdateOrCreateLimitationProfileInput {
  update: UpdateLimitationProfile!
  create: CreateLimitationProfile!
  clientMutationId: String!
}

type UpdateOrCreateLimitationProfilePayload {
  viewer: Viewer!
  clientMutationId: String!
  limitationProfile: LimitationProfile
  edge: LimitationProfileEdge
  user: User
}

input UpdateOrCreateMealInput {
  update: UpdateMeal!
  create: CreateMeal!
  clientMutationId: String!
}

type UpdateOrCreateMealPayload {
  viewer: Viewer!
  clientMutationId: String!
  meal: Meal
  edge: MealEdge
  user: User
}

input UpdateOrCreateMealSettingsInput {
  update: UpdateMealSettings!
  create: CreateMealSettings!
  clientMutationId: String!
}

type UpdateOrCreateMealSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  mealSettings: MealSettings
  edge: MealSettingsEdge
  meal: Meal
  person: Person
}

input UpdateOrCreateMicroTargetInput {
  update: UpdateMicroTarget!
  create: CreateMicroTarget!
  clientMutationId: String!
}

type UpdateOrCreateMicroTargetPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTarget: MicroTarget
  edge: MicroTargetEdge
  microTargetDay: MicroTargetsDay
}

input UpdateOrCreateMicroTargetsDayInput {
  update: UpdateMicroTargetsDay!
  create: CreateMicroTargetsDay!
  clientMutationId: String!
}

type UpdateOrCreateMicroTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsDay: MicroTargetsDay
  edge: MicroTargetsDayEdge
  microTargetsSettings: MicroTargetsSettings
}

input UpdateOrCreateMicroTargetsSettingsInput {
  update: UpdateMicroTargetsSettings!
  create: CreateMicroTargetsSettings!
  clientMutationId: String!
}

type UpdateOrCreateMicroTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  microTargetsSettings: MicroTargetsSettings
  edge: MicroTargetsSettingsEdge
  person: Person
}

input UpdateOrCreateNutritionTargetsDayInput {
  update: UpdateNutritionTargetsDay!
  create: CreateNutritionTargetsDay!
  clientMutationId: String!
}

type UpdateOrCreateNutritionTargetsDayPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsDay: NutritionTargetsDay
  edge: NutritionTargetsDayEdge
  nutritionTargetsSettings: NutritionTargetsSettings
}

input UpdateOrCreateNutritionTargetsSettingsInput {
  update: UpdateNutritionTargetsSettings!
  create: CreateNutritionTargetsSettings!
  clientMutationId: String!
}

type UpdateOrCreateNutritionTargetsSettingsPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionTargetsSettings: NutritionTargetsSettings
  edge: NutritionTargetsSettingsEdge
  person: Person
}

input UpdateOrCreateNutritionValuesInput {
  update: UpdateNutritionValues!
  create: CreateNutritionValues!
  clientMutationId: String!
}

type UpdateOrCreateNutritionValuesPayload {
  viewer: Viewer!
  clientMutationId: String!
  nutritionValues: NutritionValues
  edge: NutritionValuesEdge
  ingredient: Ingredient
  recipe: Recipe
}

input UpdateOrCreatePantryItemInput {
  update: UpdatePantryItem!
  create: CreatePantryItem!
  clientMutationId: String!
}

type UpdateOrCreatePantryItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItem: PantryItem
  edge: PantryItemEdge
  foodItem: FoodItem
  user: User
}

input UpdateOrCreatePersonalDataInput {
  update: UpdatePersonalData!
  create: CreatePersonalData!
  clientMutationId: String!
}

type UpdateOrCreatePersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personalData: PersonalData
  edge: PersonalDataEdge
  person: Person
}

input UpdateOrCreatePersonInput {
  update: UpdatePerson!
  create: CreatePerson!
  clientMutationId: String!
}

type UpdateOrCreatePersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  person: Person
  edge: PersonEdge
  limitationProfile: LimitationProfile
  microTargetsSettings: MicroTargetsSettings
  nutritionTargetsSettings: NutritionTargetsSettings
  personalData: PersonalData
  serving: Serving
  user: User
}

input UpdateOrCreateRecipeInput {
  update: UpdateRecipe!
  create: CreateRecipe!
  clientMutationId: String!
}

type UpdateOrCreateRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  recipe: Recipe
  edge: RecipeEdge
  food: Food
  img: File
  nutritionValues: NutritionValues
  user: User
}

input UpdateOrCreateServingInput {
  update: UpdateServing!
  create: CreateServing!
  clientMutationId: String!
}

type UpdateOrCreateServingPayload {
  viewer: Viewer!
  clientMutationId: String!
  serving: Serving
  edge: ServingEdge
  food: Food
  person: Person
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  create: CreateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  appSettings: AppSettings
}

input UpdatePantryItem {
  id: ID!
  foodItemId: ID
  foodItem: PantryItemfoodItemFoodItem
  userId: ID
}

input UpdatePantryItemInput {
  id: ID!
  foodItemId: ID
  foodItem: PantryItemfoodItemFoodItem
  userId: ID
  clientMutationId: String!
}

type UpdatePantryItemPayload {
  viewer: Viewer!
  clientMutationId: String!
  pantryItem: PantryItem
  edge: PantryItemEdge
  foodItem: FoodItem
  user: User
}

input UpdatePerson {
  family: Boolean
  id: ID!
  name: String
  limitationProfileId: ID
  limitationProfile: PersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: PersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonmealSettingsMealSettings!]
}

input UpdatePersonalData {
  id: ID!
  personId: ID
  person: PersonalDatapersonPerson
}

input UpdatePersonalDataInput {
  id: ID!
  personId: ID
  person: PersonalDatapersonPerson
  clientMutationId: String!
}

type UpdatePersonalDataPayload {
  viewer: Viewer!
  clientMutationId: String!
  personalData: PersonalData
  edge: PersonalDataEdge
  person: Person
}

input UpdatePersonInput {
  family: Boolean
  id: ID!
  name: String
  limitationProfileId: ID
  limitationProfile: PersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: PersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: PersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: PersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [PersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [PersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [PersonmealSettingsMealSettings!]
  clientMutationId: String!
}

type UpdatePersonPayload {
  viewer: Viewer!
  clientMutationId: String!
  person: Person
  edge: PersonEdge
  limitationProfile: LimitationProfile
  microTargetsSettings: MicroTargetsSettings
  nutritionTargetsSettings: NutritionTargetsSettings
  personalData: PersonalData
  serving: Serving
  user: User
}

input UpdateRecipe {
  id: ID!
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipefoodFood
  imgId: ID
  img: RecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPerson!]
}

input UpdateRecipeInput {
  id: ID!
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: RecipefoodFood
  imgId: ID
  img: RecipeimgFile
  nutritionValuesId: ID
  nutritionValues: RecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [RecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [RecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [RecipelikedByPerson!]
  clientMutationId: String!
}

type UpdateRecipePayload {
  viewer: Viewer!
  clientMutationId: String!
  recipe: Recipe
  edge: RecipeEdge
  food: Food
  img: File
  nutritionValues: NutritionValues
  user: User
}

input UpdateServing {
  guest: Boolean
  id: ID!
  size: Float
  foodId: ID
  food: ServingfoodFood
  personId: ID
  person: ServingpersonPerson
}

input UpdateServingInput {
  guest: Boolean
  id: ID!
  size: Float
  foodId: ID
  food: ServingfoodFood
  personId: ID
  person: ServingpersonPerson
  clientMutationId: String!
}

type UpdateServingPayload {
  viewer: Viewer!
  clientMutationId: String!
  serving: Serving
  edge: ServingEdge
  food: Food
  person: Person
}

input UpdateUser {
  id: ID!
  kitchenUtensils: [USER_KITCHEN_UTENSILS!]
  publicName: String
  appSettingsId: ID
  limitationProfilesIds: [ID!]
  limitationProfiles: [UserlimitationProfilesLimitationProfile!]
  mealsIds: [ID!]
  meals: [UsermealsMeal!]
  pantryItemsIds: [ID!]
  pantryItems: [UserpantryItemsPantryItem!]
  personsIds: [ID!]
  persons: [UserpersonsPerson!]
  recipesIds: [ID!]
  recipes: [UserrecipesRecipe!]
  userIngredientsIds: [ID!]
  userIngredients: [UseruserIngredientsIngredient!]
}

input UpdateUserInput {
  id: ID!
  kitchenUtensils: [USER_KITCHEN_UTENSILS!]
  publicName: String
  appSettingsId: ID
  limitationProfilesIds: [ID!]
  limitationProfiles: [UserlimitationProfilesLimitationProfile!]
  mealsIds: [ID!]
  meals: [UsermealsMeal!]
  pantryItemsIds: [ID!]
  pantryItems: [UserpantryItemsPantryItem!]
  personsIds: [ID!]
  persons: [UserpersonsPerson!]
  recipesIds: [ID!]
  recipes: [UserrecipesRecipe!]
  userIngredientsIds: [ID!]
  userIngredients: [UseruserIngredientsIngredient!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  appSettings: AppSettings
}

# Family Account
type User implements Node {
  appSettings(filter: AppSettingsFilter): AppSettings
  createdAt: DateTime!
  email: String
  id: ID!
  kitchenUtensils: [USER_KITCHEN_UTENSILS!]
  limitationProfiles(filter: LimitationProfileFilter, orderBy: LimitationProfileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): LimitationProfileConnection
  meals(filter: MealFilter, orderBy: MealOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MealConnection
  pantryItems(filter: PantryItemFilter, orderBy: PantryItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PantryItemConnection
  password: String
  persons(filter: PersonFilter, orderBy: PersonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection
  publicName: String
  recipes(filter: RecipeFilter, orderBy: RecipeOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection
  updatedAt: DateTime!
  userIngredients(filter: IngredientFilter, orderBy: IngredientOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection
}

enum USER_KITCHEN_UTENSILS {
  Pan
  Oven
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  publicName: String

  # All values that are not equal to given value.
  publicName_not: String

  # All values that are contained in given list.
  publicName_in: [String!]

  # All values that are not contained in given list.
  publicName_not_in: [String!]

  # All values less than the given value.
  publicName_lt: String

  # All values less than or equal the given value.
  publicName_lte: String

  # All values greater than the given value.
  publicName_gt: String

  # All values greater than or equal the given value.
  publicName_gte: String

  # All values containing the given string.
  publicName_contains: String

  # All values not containing the given string.
  publicName_not_contains: String

  # All values starting with the given string.
  publicName_starts_with: String

  # All values not starting with the given string.
  publicName_not_starts_with: String

  # All values ending with the given string.
  publicName_ends_with: String

  # All values not ending with the given string.
  publicName_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  appSettings: AppSettingsFilter
  limitationProfiles_every: LimitationProfileFilter
  limitationProfiles_some: LimitationProfileFilter
  limitationProfiles_none: LimitationProfileFilter
  meals_every: MealFilter
  meals_some: MealFilter
  meals_none: MealFilter
  pantryItems_every: PantryItemFilter
  pantryItems_some: PantryItemFilter
  pantryItems_none: PantryItemFilter
  persons_every: PersonFilter
  persons_some: PersonFilter
  persons_none: PersonFilter
  recipes_every: RecipeFilter
  recipes_some: RecipeFilter
  recipes_none: RecipeFilter
  userIngredients_every: IngredientFilter
  userIngredients_some: IngredientFilter
  userIngredients_none: IngredientFilter
}

input UserlimitationProfilesLimitationProfile {
  name: String!
  personsIds: [ID!]
  persons: [UserlimitationProfilesLimitationProfilepersonsPerson!]
}

input UserlimitationProfilesLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  microTargetsSettingsId: ID
  microTargetsSettings: UserlimitationProfilesLimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: UserlimitationProfilesLimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: UserlimitationProfilesLimitationProfilepersonsPersonpersonalDataPersonalData
  servingId: ID
  serving: UserlimitationProfilesLimitationProfilepersonsPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [UserlimitationProfilesLimitationProfilepersonsPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [UserlimitationProfilesLimitationProfilepersonsPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [UserlimitationProfilesLimitationProfilepersonsPersonmealSettingsMealSettings!]
}

input UserlimitationProfilesLimitationProfilepersonsPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserlimitationProfilesLimitationProfilepersonsPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserlimitationProfilesLimitationProfilepersonsPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input UserlimitationProfilesLimitationProfilepersonsPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input UserlimitationProfilesLimitationProfilepersonsPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input UserlimitationProfilesLimitationProfilepersonsPersonpersonalDataPersonalData {
  personId: ID
}

input UserlimitationProfilesLimitationProfilepersonsPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input UsermealsMeal {
  date: DateTime!
  name: String!
  order: Int
  foodsIds: [ID!]
  foods: [UsermealsMealfoodsFood!]
  mealSettingsIds: [ID!]
  mealSettings: [UsermealsMealmealSettingsMealSettings!]
}

input UsermealsMealfoodsFood {
  eaten: Boolean
  pos: Int
  recipeId: ID
  recipe: UsermealsMealfoodsFoodrecipeRecipe
  leftoversIds: [ID!]
  leftovers: [UsermealsMealfoodsFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [UsermealsMealfoodsFoodservingsServing!]
}

input UsermealsMealfoodsFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UsermealsMealfoodsFoodrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UsermealsMealfoodsFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input UsermealsMealmealSettingsMealSettings {
  default: Boolean
  personId: ID
  person: UsermealsMealmealSettingsMealSettingspersonPerson
}

input UsermealsMealmealSettingsMealSettingspersonPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  publicName_ASC
  publicName_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserpantryItemsPantryItem {
  foodItemId: ID
  foodItem: UserpantryItemsPantryItemfoodItemFoodItem
}

input UserpantryItemsPantryItemfoodItemFoodItem {
  amount: Float
  ingredientId: ID
  ingredient: UserpantryItemsPantryItemfoodItemFoodItemingredientIngredient
}

input UserpantryItemsPantryItemfoodItemFoodItemingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input UserpersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: UserpersonsPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: UserpersonsPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: UserpersonsPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  servingId: ID
  serving: UserpersonsPersonservingServing
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [UserpersonsPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [UserpersonsPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [UserpersonsPersonmealSettingsMealSettings!]
}

input UserpersonsPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: UserpersonsPersondislikedRecipesRecipefoodFood
  imgId: ID
  img: UserpersonsPersondislikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: UserpersonsPersondislikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [UserpersonsPersondislikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [UserpersonsPersondislikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [UserpersonsPersondislikedRecipesRecipelikedByPerson!]
}

input UserpersonsPersondislikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersondislikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UserpersonsPersondislikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input UserpersonsPersondislikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input UserpersonsPersondislikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersondislikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input UserpersonsPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: UserpersonsPersonlikedRecipesRecipefoodFood
  imgId: ID
  img: UserpersonsPersonlikedRecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: UserpersonsPersonlikedRecipesRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [UserpersonsPersonlikedRecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [UserpersonsPersonlikedRecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [UserpersonsPersonlikedRecipesRecipelikedByPerson!]
}

input UserpersonsPersonlikedRecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersonlikedRecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UserpersonsPersonlikedRecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input UserpersonsPersonlikedRecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input UserpersonsPersonlikedRecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersonlikedRecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input UserpersonsPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
  persons: [UserpersonsPersonlimitationProfileLimitationProfilepersonsPerson!]
}

input UserpersonsPersonlimitationProfileLimitationProfilepersonsPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  meal: UserpersonsPersonmealSettingsMealSettingsmealMeal
}

input UserpersonsPersonmealSettingsMealSettingsmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserpersonsPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  microTargetsDaysIds: [ID!]
  microTargetsDays: [UserpersonsPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay!]
}

input UserpersonsPersonmicroTargetsSettingsMicroTargetsSettingsmicroTargetsDaysMicroTargetsDay {
  day: MICRO_TARGETS_DAY_DAY!
  microTargetsSettingsId: ID
  microTargetsIds: [ID!]
}

input UserpersonsPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  nutritionTargetsDaysIds: [ID!]
  nutritionTargetsDays: [UserpersonsPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay!]
}

input UserpersonsPersonnutritionTargetsSettingsNutritionTargetsSettingsnutritionTargetsDaysNutritionTargetsDay {
  day: NUTRITION_TARGETS_DAY_DAY!
  nutritionTargetsSettingsId: ID
}

input UserpersonsPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  food: UserpersonsPersonservingServingfoodFood
}

input UserpersonsPersonservingServingfoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UserrecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: UserrecipesRecipefoodFood
  imgId: ID
  img: UserrecipesRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: UserrecipesRecipenutritionValuesNutritionValues
  dislikedByIds: [ID!]
  dislikedBy: [UserrecipesRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [UserrecipesRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [UserrecipesRecipelikedByPerson!]
}

input UserrecipesRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: UserrecipesRecipedislikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: UserrecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: UserrecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: UserrecipesRecipedislikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: UserrecipesRecipedislikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [UserrecipesRecipedislikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [UserrecipesRecipedislikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [UserrecipesRecipedislikedByPersonmealSettingsMealSettings!]
}

input UserrecipesRecipedislikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserrecipesRecipedislikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserrecipesRecipedislikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input UserrecipesRecipedislikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input UserrecipesRecipedislikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input UserrecipesRecipedislikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input UserrecipesRecipedislikedByPersonpersonalDataPersonalData {
  personId: ID
}

input UserrecipesRecipedislikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input UserrecipesRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  meal: UserrecipesRecipefoodFoodmealMeal
  leftoversIds: [ID!]
  leftovers: [UserrecipesRecipefoodFoodleftoversFood!]
  servingsIds: [ID!]
  servings: [UserrecipesRecipefoodFoodservingsServing!]
}

input UserrecipesRecipefoodFoodleftoversFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UserrecipesRecipefoodFoodmealMeal {
  date: DateTime!
  name: String!
  order: Int
  userId: ID
  foodsIds: [ID!]
  mealSettingsIds: [ID!]
}

input UserrecipesRecipefoodFoodservingsServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input UserrecipesRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  kitchenUtensilImg: UserrecipesRecipeimgFilekitchenUtensilImgKitchenUtensil
}

input UserrecipesRecipeimgFilekitchenUtensilImgKitchenUtensil {
  type: KITCHEN_UTENSIL_TYPE!
  imgId: ID
}

input UserrecipesRecipeingredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: UserrecipesRecipeingredientsIngredientnutritionValuesNutritionValues
  userId: ID
  foodItemsIds: [ID!]
  foodItems: [UserrecipesRecipeingredientsIngredientfoodItemsFoodItem!]
}

input UserrecipesRecipeingredientsIngredientfoodItemsFoodItem {
  amount: Float
  ingredientId: ID
  pantryItemId: ID
}

input UserrecipesRecipeingredientsIngredientnutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

input UserrecipesRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  limitationProfile: UserrecipesRecipelikedByPersonlimitationProfileLimitationProfile
  microTargetsSettingsId: ID
  microTargetsSettings: UserrecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings
  nutritionTargetsSettingsId: ID
  nutritionTargetsSettings: UserrecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings
  personalDataId: ID
  personalData: UserrecipesRecipelikedByPersonpersonalDataPersonalData
  servingId: ID
  serving: UserrecipesRecipelikedByPersonservingServing
  userId: ID
  dislikedRecipesIds: [ID!]
  dislikedRecipes: [UserrecipesRecipelikedByPersondislikedRecipesRecipe!]
  likedRecipesIds: [ID!]
  likedRecipes: [UserrecipesRecipelikedByPersonlikedRecipesRecipe!]
  mealSettingsIds: [ID!]
  mealSettings: [UserrecipesRecipelikedByPersonmealSettingsMealSettings!]
}

input UserrecipesRecipelikedByPersondislikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserrecipesRecipelikedByPersonlikedRecipesRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UserrecipesRecipelikedByPersonlimitationProfileLimitationProfile {
  name: String!
  userId: ID
  personsIds: [ID!]
}

input UserrecipesRecipelikedByPersonmealSettingsMealSettings {
  default: Boolean
  mealId: ID
  personId: ID
}

input UserrecipesRecipelikedByPersonmicroTargetsSettingsMicroTargetsSettings {
  daily: Boolean
  personId: ID
  microTargetsDaysIds: [ID!]
}

input UserrecipesRecipelikedByPersonnutritionTargetsSettingsNutritionTargetsSettings {
  daily: Boolean
  personId: ID
  nutritionTargetsDaysIds: [ID!]
}

input UserrecipesRecipelikedByPersonpersonalDataPersonalData {
  personId: ID
}

input UserrecipesRecipelikedByPersonservingServing {
  guest: Boolean
  size: Float
  foodId: ID
  personId: ID
}

input UserrecipesRecipenutritionValuesNutritionValues {
  ingredientId: ID
  ingredient: UserrecipesRecipenutritionValuesNutritionValuesingredientIngredient
}

input UserrecipesRecipenutritionValuesNutritionValuesingredientIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input UseruserIngredientsIngredient {
  nutritionValuesId: ID
  nutritionValues: UseruserIngredientsIngredientnutritionValuesNutritionValues
  recipeId: ID
  recipe: UseruserIngredientsIngredientrecipeRecipe
  foodItemsIds: [ID!]
  foodItems: [UseruserIngredientsIngredientfoodItemsFoodItem!]
}

input UseruserIngredientsIngredientfoodItemsFoodItem {
  amount: Float
  pantryItemId: ID
  pantryItem: UseruserIngredientsIngredientfoodItemsFoodItempantryItemPantryItem
}

input UseruserIngredientsIngredientfoodItemsFoodItempantryItemPantryItem {
  foodItemId: ID
  userId: ID
}

input UseruserIngredientsIngredientnutritionValuesNutritionValues {
  recipeId: ID
  recipe: UseruserIngredientsIngredientnutritionValuesNutritionValuesrecipeRecipe
}

input UseruserIngredientsIngredientnutritionValuesNutritionValuesrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  imgId: ID
  nutritionValuesId: ID
  userId: ID
  dislikedByIds: [ID!]
  ingredientsIds: [ID!]
  likedByIds: [ID!]
}

input UseruserIngredientsIngredientrecipeRecipe {
  mealCategories: [RECIPE_MEAL_CATEGORIES!]
  public: Boolean
  foodId: ID
  food: UseruserIngredientsIngredientrecipeRecipefoodFood
  imgId: ID
  img: UseruserIngredientsIngredientrecipeRecipeimgFile
  nutritionValuesId: ID
  nutritionValues: UseruserIngredientsIngredientrecipeRecipenutritionValuesNutritionValues
  userId: ID
  dislikedByIds: [ID!]
  dislikedBy: [UseruserIngredientsIngredientrecipeRecipedislikedByPerson!]
  ingredientsIds: [ID!]
  ingredients: [UseruserIngredientsIngredientrecipeRecipeingredientsIngredient!]
  likedByIds: [ID!]
  likedBy: [UseruserIngredientsIngredientrecipeRecipelikedByPerson!]
}

input UseruserIngredientsIngredientrecipeRecipedislikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UseruserIngredientsIngredientrecipeRecipefoodFood {
  eaten: Boolean
  pos: Int
  mealId: ID
  recipeId: ID
  leftoversIds: [ID!]
  servingsIds: [ID!]
}

input UseruserIngredientsIngredientrecipeRecipeimgFile {
  name: String!
  kitchenUtensilImgId: ID
  recipeImgId: ID
}

input UseruserIngredientsIngredientrecipeRecipeingredientsIngredient {
  nutritionValuesId: ID
  recipeId: ID
  userId: ID
  foodItemsIds: [ID!]
}

input UseruserIngredientsIngredientrecipeRecipelikedByPerson {
  family: Boolean
  name: String!
  limitationProfileId: ID
  microTargetsSettingsId: ID
  nutritionTargetsSettingsId: ID
  personalDataId: ID
  servingId: ID
  userId: ID
  dislikedRecipesIds: [ID!]
  likedRecipesIds: [ID!]
  mealSettingsIds: [ID!]
}

input UseruserIngredientsIngredientrecipeRecipenutritionValuesNutritionValues {
  ingredientId: ID
  recipeId: ID
}

# This is the famous Relay viewer object
type Viewer {
  allAppSettingses(filter: AppSettingsFilter, orderBy: AppSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AppSettingsConnection!
  allDataPointFloats(filter: DataPointFloatFilter, orderBy: DataPointFloatOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): DataPointFloatConnection!
  allDataPointInts(filter: DataPointIntFilter, orderBy: DataPointIntOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): DataPointIntConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allFoods(filter: FoodFilter, orderBy: FoodOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
  allFoodItems(filter: FoodItemFilter, orderBy: FoodItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FoodItemConnection!
  allIngredients(filter: IngredientFilter, orderBy: IngredientOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  allKitchenUtensils(filter: KitchenUtensilFilter, orderBy: KitchenUtensilOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): KitchenUtensilConnection!
  allLimitationProfiles(filter: LimitationProfileFilter, orderBy: LimitationProfileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): LimitationProfileConnection!
  allMeals(filter: MealFilter, orderBy: MealOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MealConnection!
  allMealSettingses(filter: MealSettingsFilter, orderBy: MealSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MealSettingsConnection!
  allMicroTargets(filter: MicroTargetFilter, orderBy: MicroTargetOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MicroTargetConnection!
  allMicroTargetsDays(filter: MicroTargetsDayFilter, orderBy: MicroTargetsDayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MicroTargetsDayConnection!
  allMicroTargetsSettingses(filter: MicroTargetsSettingsFilter, orderBy: MicroTargetsSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): MicroTargetsSettingsConnection!
  allNutritionTargetsDays(filter: NutritionTargetsDayFilter, orderBy: NutritionTargetsDayOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NutritionTargetsDayConnection!
  allNutritionTargetsSettingses(filter: NutritionTargetsSettingsFilter, orderBy: NutritionTargetsSettingsOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NutritionTargetsSettingsConnection!
  allNutritionValueses(filter: NutritionValuesFilter, orderBy: NutritionValuesOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): NutritionValuesConnection!
  allPantryItems(filter: PantryItemFilter, orderBy: PantryItemOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PantryItemConnection!
  allPersons(filter: PersonFilter, orderBy: PersonOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonConnection!
  allPersonalDatas(filter: PersonalDataFilter, orderBy: PersonalDataOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PersonalDataConnection!
  allRecipes(filter: RecipeFilter, orderBy: RecipeOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  allServings(filter: ServingFilter, orderBy: ServingOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ServingConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  AppSettings(id: ID): AppSettings
  DataPointFloat(id: ID): DataPointFloat
  DataPointInt(id: ID): DataPointInt
  File(id: ID, secret: String, url: String): File
  Food(id: ID): Food
  FoodItem(id: ID): FoodItem
  Ingredient(id: ID): Ingredient
  KitchenUtensil(id: ID, type: KITCHEN_UTENSIL_TYPE): KitchenUtensil
  LimitationProfile(id: ID): LimitationProfile
  Meal(id: ID): Meal
  MealSettings(id: ID): MealSettings
  MicroTarget(id: ID): MicroTarget
  MicroTargetsDay(id: ID): MicroTargetsDay
  MicroTargetsSettings(id: ID): MicroTargetsSettings
  NutritionTargetsDay(id: ID): NutritionTargetsDay
  NutritionTargetsSettings(id: ID): NutritionTargetsSettings
  NutritionValues(id: ID): NutritionValues
  PantryItem(id: ID): PantryItem
  Person(id: ID): Person
  PersonalData(id: ID): PersonalData
  Recipe(id: ID): Recipe
  Serving(id: ID): Serving
  User(email: String, id: ID, publicName: String): User
  id: ID!
}

